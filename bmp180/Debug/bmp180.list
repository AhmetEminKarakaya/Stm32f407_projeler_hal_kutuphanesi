
bmp180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003614  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b8  080037b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037c0  080037c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037c0  080037c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007c47  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013d1  00000000  00000000  00027c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  00029058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000670  00000000  00000000  00029748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f4c1  00000000  00000000  00029db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008ede  00000000  00000000  00049279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be728  00000000  00000000  00052157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011087f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ca4  00000000  00000000  001108d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003784 	.word	0x08003784

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003784 	.word	0x08003784

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b96e 	b.w	8000b28 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	4604      	mov	r4, r0
 800086c:	468c      	mov	ip, r1
 800086e:	2b00      	cmp	r3, #0
 8000870:	f040 8083 	bne.w	800097a <__udivmoddi4+0x116>
 8000874:	428a      	cmp	r2, r1
 8000876:	4617      	mov	r7, r2
 8000878:	d947      	bls.n	800090a <__udivmoddi4+0xa6>
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	b142      	cbz	r2, 8000892 <__udivmoddi4+0x2e>
 8000880:	f1c2 0020 	rsb	r0, r2, #32
 8000884:	fa24 f000 	lsr.w	r0, r4, r0
 8000888:	4091      	lsls	r1, r2
 800088a:	4097      	lsls	r7, r2
 800088c:	ea40 0c01 	orr.w	ip, r0, r1
 8000890:	4094      	lsls	r4, r2
 8000892:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000896:	0c23      	lsrs	r3, r4, #16
 8000898:	fbbc f6f8 	udiv	r6, ip, r8
 800089c:	fa1f fe87 	uxth.w	lr, r7
 80008a0:	fb08 c116 	mls	r1, r8, r6, ip
 80008a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a8:	fb06 f10e 	mul.w	r1, r6, lr
 80008ac:	4299      	cmp	r1, r3
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x60>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008b6:	f080 8119 	bcs.w	8000aec <__udivmoddi4+0x288>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 8116 	bls.w	8000aec <__udivmoddi4+0x288>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008cc:	fb08 3310 	mls	r3, r8, r0, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d8:	45a6      	cmp	lr, r4
 80008da:	d909      	bls.n	80008f0 <__udivmoddi4+0x8c>
 80008dc:	193c      	adds	r4, r7, r4
 80008de:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e2:	f080 8105 	bcs.w	8000af0 <__udivmoddi4+0x28c>
 80008e6:	45a6      	cmp	lr, r4
 80008e8:	f240 8102 	bls.w	8000af0 <__udivmoddi4+0x28c>
 80008ec:	3802      	subs	r0, #2
 80008ee:	443c      	add	r4, r7
 80008f0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f4:	eba4 040e 	sub.w	r4, r4, lr
 80008f8:	2600      	movs	r6, #0
 80008fa:	b11d      	cbz	r5, 8000904 <__udivmoddi4+0xa0>
 80008fc:	40d4      	lsrs	r4, r2
 80008fe:	2300      	movs	r3, #0
 8000900:	e9c5 4300 	strd	r4, r3, [r5]
 8000904:	4631      	mov	r1, r6
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	b902      	cbnz	r2, 800090e <__udivmoddi4+0xaa>
 800090c:	deff      	udf	#255	; 0xff
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	2a00      	cmp	r2, #0
 8000914:	d150      	bne.n	80009b8 <__udivmoddi4+0x154>
 8000916:	1bcb      	subs	r3, r1, r7
 8000918:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800091c:	fa1f f887 	uxth.w	r8, r7
 8000920:	2601      	movs	r6, #1
 8000922:	fbb3 fcfe 	udiv	ip, r3, lr
 8000926:	0c21      	lsrs	r1, r4, #16
 8000928:	fb0e 331c 	mls	r3, lr, ip, r3
 800092c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000930:	fb08 f30c 	mul.w	r3, r8, ip
 8000934:	428b      	cmp	r3, r1
 8000936:	d907      	bls.n	8000948 <__udivmoddi4+0xe4>
 8000938:	1879      	adds	r1, r7, r1
 800093a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0xe2>
 8000940:	428b      	cmp	r3, r1
 8000942:	f200 80e9 	bhi.w	8000b18 <__udivmoddi4+0x2b4>
 8000946:	4684      	mov	ip, r0
 8000948:	1ac9      	subs	r1, r1, r3
 800094a:	b2a3      	uxth	r3, r4
 800094c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000950:	fb0e 1110 	mls	r1, lr, r0, r1
 8000954:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000958:	fb08 f800 	mul.w	r8, r8, r0
 800095c:	45a0      	cmp	r8, r4
 800095e:	d907      	bls.n	8000970 <__udivmoddi4+0x10c>
 8000960:	193c      	adds	r4, r7, r4
 8000962:	f100 33ff 	add.w	r3, r0, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x10a>
 8000968:	45a0      	cmp	r8, r4
 800096a:	f200 80d9 	bhi.w	8000b20 <__udivmoddi4+0x2bc>
 800096e:	4618      	mov	r0, r3
 8000970:	eba4 0408 	sub.w	r4, r4, r8
 8000974:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000978:	e7bf      	b.n	80008fa <__udivmoddi4+0x96>
 800097a:	428b      	cmp	r3, r1
 800097c:	d909      	bls.n	8000992 <__udivmoddi4+0x12e>
 800097e:	2d00      	cmp	r5, #0
 8000980:	f000 80b1 	beq.w	8000ae6 <__udivmoddi4+0x282>
 8000984:	2600      	movs	r6, #0
 8000986:	e9c5 0100 	strd	r0, r1, [r5]
 800098a:	4630      	mov	r0, r6
 800098c:	4631      	mov	r1, r6
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	fab3 f683 	clz	r6, r3
 8000996:	2e00      	cmp	r6, #0
 8000998:	d14a      	bne.n	8000a30 <__udivmoddi4+0x1cc>
 800099a:	428b      	cmp	r3, r1
 800099c:	d302      	bcc.n	80009a4 <__udivmoddi4+0x140>
 800099e:	4282      	cmp	r2, r0
 80009a0:	f200 80b8 	bhi.w	8000b14 <__udivmoddi4+0x2b0>
 80009a4:	1a84      	subs	r4, r0, r2
 80009a6:	eb61 0103 	sbc.w	r1, r1, r3
 80009aa:	2001      	movs	r0, #1
 80009ac:	468c      	mov	ip, r1
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d0a8      	beq.n	8000904 <__udivmoddi4+0xa0>
 80009b2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0xa0>
 80009b8:	f1c2 0320 	rsb	r3, r2, #32
 80009bc:	fa20 f603 	lsr.w	r6, r0, r3
 80009c0:	4097      	lsls	r7, r2
 80009c2:	fa01 f002 	lsl.w	r0, r1, r2
 80009c6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ca:	40d9      	lsrs	r1, r3
 80009cc:	4330      	orrs	r0, r6
 80009ce:	0c03      	lsrs	r3, r0, #16
 80009d0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009e0:	fb06 f108 	mul.w	r1, r6, r8
 80009e4:	4299      	cmp	r1, r3
 80009e6:	fa04 f402 	lsl.w	r4, r4, r2
 80009ea:	d909      	bls.n	8000a00 <__udivmoddi4+0x19c>
 80009ec:	18fb      	adds	r3, r7, r3
 80009ee:	f106 3cff 	add.w	ip, r6, #4294967295
 80009f2:	f080 808d 	bcs.w	8000b10 <__udivmoddi4+0x2ac>
 80009f6:	4299      	cmp	r1, r3
 80009f8:	f240 808a 	bls.w	8000b10 <__udivmoddi4+0x2ac>
 80009fc:	3e02      	subs	r6, #2
 80009fe:	443b      	add	r3, r7
 8000a00:	1a5b      	subs	r3, r3, r1
 8000a02:	b281      	uxth	r1, r0
 8000a04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a10:	fb00 f308 	mul.w	r3, r0, r8
 8000a14:	428b      	cmp	r3, r1
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x1c4>
 8000a18:	1879      	adds	r1, r7, r1
 8000a1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a1e:	d273      	bcs.n	8000b08 <__udivmoddi4+0x2a4>
 8000a20:	428b      	cmp	r3, r1
 8000a22:	d971      	bls.n	8000b08 <__udivmoddi4+0x2a4>
 8000a24:	3802      	subs	r0, #2
 8000a26:	4439      	add	r1, r7
 8000a28:	1acb      	subs	r3, r1, r3
 8000a2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a2e:	e778      	b.n	8000922 <__udivmoddi4+0xbe>
 8000a30:	f1c6 0c20 	rsb	ip, r6, #32
 8000a34:	fa03 f406 	lsl.w	r4, r3, r6
 8000a38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a3c:	431c      	orrs	r4, r3
 8000a3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a42:	fa01 f306 	lsl.w	r3, r1, r6
 8000a46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a4e:	431f      	orrs	r7, r3
 8000a50:	0c3b      	lsrs	r3, r7, #16
 8000a52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a56:	fa1f f884 	uxth.w	r8, r4
 8000a5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a62:	fb09 fa08 	mul.w	sl, r9, r8
 8000a66:	458a      	cmp	sl, r1
 8000a68:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x220>
 8000a72:	1861      	adds	r1, r4, r1
 8000a74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a78:	d248      	bcs.n	8000b0c <__udivmoddi4+0x2a8>
 8000a7a:	458a      	cmp	sl, r1
 8000a7c:	d946      	bls.n	8000b0c <__udivmoddi4+0x2a8>
 8000a7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a82:	4421      	add	r1, r4
 8000a84:	eba1 010a 	sub.w	r1, r1, sl
 8000a88:	b2bf      	uxth	r7, r7
 8000a8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a96:	fb00 f808 	mul.w	r8, r0, r8
 8000a9a:	45b8      	cmp	r8, r7
 8000a9c:	d907      	bls.n	8000aae <__udivmoddi4+0x24a>
 8000a9e:	19e7      	adds	r7, r4, r7
 8000aa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aa4:	d22e      	bcs.n	8000b04 <__udivmoddi4+0x2a0>
 8000aa6:	45b8      	cmp	r8, r7
 8000aa8:	d92c      	bls.n	8000b04 <__udivmoddi4+0x2a0>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4427      	add	r7, r4
 8000aae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ab2:	eba7 0708 	sub.w	r7, r7, r8
 8000ab6:	fba0 8902 	umull	r8, r9, r0, r2
 8000aba:	454f      	cmp	r7, r9
 8000abc:	46c6      	mov	lr, r8
 8000abe:	4649      	mov	r1, r9
 8000ac0:	d31a      	bcc.n	8000af8 <__udivmoddi4+0x294>
 8000ac2:	d017      	beq.n	8000af4 <__udivmoddi4+0x290>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x27a>
 8000ac6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aca:	eb67 0701 	sbc.w	r7, r7, r1
 8000ace:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ad2:	40f2      	lsrs	r2, r6
 8000ad4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ad8:	40f7      	lsrs	r7, r6
 8000ada:	e9c5 2700 	strd	r2, r7, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	462e      	mov	r6, r5
 8000ae8:	4628      	mov	r0, r5
 8000aea:	e70b      	b.n	8000904 <__udivmoddi4+0xa0>
 8000aec:	4606      	mov	r6, r0
 8000aee:	e6e9      	b.n	80008c4 <__udivmoddi4+0x60>
 8000af0:	4618      	mov	r0, r3
 8000af2:	e6fd      	b.n	80008f0 <__udivmoddi4+0x8c>
 8000af4:	4543      	cmp	r3, r8
 8000af6:	d2e5      	bcs.n	8000ac4 <__udivmoddi4+0x260>
 8000af8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000afc:	eb69 0104 	sbc.w	r1, r9, r4
 8000b00:	3801      	subs	r0, #1
 8000b02:	e7df      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b04:	4608      	mov	r0, r1
 8000b06:	e7d2      	b.n	8000aae <__udivmoddi4+0x24a>
 8000b08:	4660      	mov	r0, ip
 8000b0a:	e78d      	b.n	8000a28 <__udivmoddi4+0x1c4>
 8000b0c:	4681      	mov	r9, r0
 8000b0e:	e7b9      	b.n	8000a84 <__udivmoddi4+0x220>
 8000b10:	4666      	mov	r6, ip
 8000b12:	e775      	b.n	8000a00 <__udivmoddi4+0x19c>
 8000b14:	4630      	mov	r0, r6
 8000b16:	e74a      	b.n	80009ae <__udivmoddi4+0x14a>
 8000b18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b1c:	4439      	add	r1, r7
 8000b1e:	e713      	b.n	8000948 <__udivmoddi4+0xe4>
 8000b20:	3802      	subs	r0, #2
 8000b22:	443c      	add	r4, r7
 8000b24:	e724      	b.n	8000970 <__udivmoddi4+0x10c>
 8000b26:	bf00      	nop

08000b28 <__aeabi_idiv0>:
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <BMP180_Init>:
 *      Author: ahmet
 */

#include "bmp180.h"

void BMP180_Init(){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0

	if(HAL_I2C_IsDeviceReady(&hi2c1, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 1, 100000) != HAL_OK){
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <BMP180_Init+0x2c>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	21ee      	movs	r1, #238	; 0xee
 8000b36:	4809      	ldr	r0, [pc, #36]	; (8000b5c <BMP180_Init+0x30>)
 8000b38:	f001 fd0e 	bl	8002558 <HAL_I2C_IsDeviceReady>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d005      	beq.n	8000b4e <BMP180_Init+0x22>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <BMP180_Init+0x34>)
 8000b4a:	f001 f887 	bl	8001c5c <HAL_GPIO_WritePin>
	}

	BMP180_Get_Calibration_Value();
 8000b4e:	f000 f809 	bl	8000b64 <BMP180_Get_Calibration_Value>

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	000186a0 	.word	0x000186a0
 8000b5c:	20000084 	.word	0x20000084
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <BMP180_Get_Calibration_Value>:

void BMP180_Get_Calibration_Value(){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08c      	sub	sp, #48	; 0x30
 8000b68:	af04      	add	r7, sp, #16

	int a=0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]

	uint8_t callbuff[BMP180_CALIBRATION_VALUE_LENGTH] = {0};
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	821a      	strh	r2, [r3, #16]

	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REGISTER_ADDRESS, BMP180_DEVICE_CALIBRATION_START_ADDRESS, 1, callbuff, BMP180_CALIBRATION_VALUE_LENGTH, 100000);
 8000b82:	4bb3      	ldr	r3, [pc, #716]	; (8000e50 <BMP180_Get_Calibration_Value+0x2ec>)
 8000b84:	9302      	str	r3, [sp, #8]
 8000b86:	2316      	movs	r3, #22
 8000b88:	9301      	str	r3, [sp, #4]
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2301      	movs	r3, #1
 8000b90:	22aa      	movs	r2, #170	; 0xaa
 8000b92:	21ef      	movs	r1, #239	; 0xef
 8000b94:	48af      	ldr	r0, [pc, #700]	; (8000e54 <BMP180_Get_Calibration_Value+0x2f0>)
 8000b96:	f001 fab9 	bl	800210c <HAL_I2C_Mem_Read>


	AC1 = (int16_t)callbuff[a] << 8 | callbuff[a+1]; a+=2;
 8000b9a:	1d3a      	adds	r2, r7, #4
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	021b      	lsls	r3, r3, #8
 8000ba4:	b21a      	sxth	r2, r3
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	f107 0120 	add.w	r1, r7, #32
 8000bae:	440b      	add	r3, r1
 8000bb0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	b21a      	sxth	r2, r3
 8000bba:	4ba7      	ldr	r3, [pc, #668]	; (8000e58 <BMP180_Get_Calibration_Value+0x2f4>)
 8000bbc:	801a      	strh	r2, [r3, #0]
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	61fb      	str	r3, [r7, #28]
	AC2 = (int16_t)callbuff[a] << 8 | callbuff[a+1]; a+=2;
 8000bc4:	1d3a      	adds	r2, r7, #4
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	4413      	add	r3, r2
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	021b      	lsls	r3, r3, #8
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	f107 0120 	add.w	r1, r7, #32
 8000bd8:	440b      	add	r3, r1
 8000bda:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	4b9d      	ldr	r3, [pc, #628]	; (8000e5c <BMP180_Get_Calibration_Value+0x2f8>)
 8000be6:	801a      	strh	r2, [r3, #0]
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	3302      	adds	r3, #2
 8000bec:	61fb      	str	r3, [r7, #28]
	AC3 = (int16_t)callbuff[a] << 8 | callbuff[a+1]; a+=2;
 8000bee:	1d3a      	adds	r2, r7, #4
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	f107 0120 	add.w	r1, r7, #32
 8000c02:	440b      	add	r3, r1
 8000c04:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	4b94      	ldr	r3, [pc, #592]	; (8000e60 <BMP180_Get_Calibration_Value+0x2fc>)
 8000c10:	801a      	strh	r2, [r3, #0]
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3302      	adds	r3, #2
 8000c16:	61fb      	str	r3, [r7, #28]
	AC4 = (int16_t)callbuff[a] << 8 | callbuff[a+1]; a+=2;
 8000c18:	1d3a      	adds	r2, r7, #4
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	3301      	adds	r3, #1
 8000c28:	f107 0120 	add.w	r1, r7, #32
 8000c2c:	440b      	add	r3, r1
 8000c2e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000c32:	b21b      	sxth	r3, r3
 8000c34:	4313      	orrs	r3, r2
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	4b8a      	ldr	r3, [pc, #552]	; (8000e64 <BMP180_Get_Calibration_Value+0x300>)
 8000c3a:	801a      	strh	r2, [r3, #0]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	3302      	adds	r3, #2
 8000c40:	61fb      	str	r3, [r7, #28]
	AC5 = (int16_t)callbuff[a] << 8 | callbuff[a+1]; a+=2;
 8000c42:	1d3a      	adds	r2, r7, #4
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	4413      	add	r3, r2
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3301      	adds	r3, #1
 8000c52:	f107 0120 	add.w	r1, r7, #32
 8000c56:	440b      	add	r3, r1
 8000c58:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	b21a      	sxth	r2, r3
 8000c62:	4b81      	ldr	r3, [pc, #516]	; (8000e68 <BMP180_Get_Calibration_Value+0x304>)
 8000c64:	801a      	strh	r2, [r3, #0]
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3302      	adds	r3, #2
 8000c6a:	61fb      	str	r3, [r7, #28]
	AC6 = (int16_t)callbuff[a] << 8 | callbuff[a+1]; a+=2;
 8000c6c:	1d3a      	adds	r2, r7, #4
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	b21a      	sxth	r2, r3
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	f107 0120 	add.w	r1, r7, #32
 8000c80:	440b      	add	r3, r1
 8000c82:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000c86:	b21b      	sxth	r3, r3
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	b21a      	sxth	r2, r3
 8000c8c:	4b77      	ldr	r3, [pc, #476]	; (8000e6c <BMP180_Get_Calibration_Value+0x308>)
 8000c8e:	801a      	strh	r2, [r3, #0]
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	3302      	adds	r3, #2
 8000c94:	61fb      	str	r3, [r7, #28]
	B1 =  (int16_t)callbuff[a] << 8 | callbuff[a+1]; a+=2;
 8000c96:	1d3a      	adds	r2, r7, #4
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	021b      	lsls	r3, r3, #8
 8000ca0:	b21a      	sxth	r2, r3
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	f107 0120 	add.w	r1, r7, #32
 8000caa:	440b      	add	r3, r1
 8000cac:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	b21a      	sxth	r2, r3
 8000cb6:	4b6e      	ldr	r3, [pc, #440]	; (8000e70 <BMP180_Get_Calibration_Value+0x30c>)
 8000cb8:	801a      	strh	r2, [r3, #0]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	61fb      	str	r3, [r7, #28]
	B2 =  (int16_t)callbuff[a] << 8 | callbuff[a+1]; a+=2;
 8000cc0:	1d3a      	adds	r2, r7, #4
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	f107 0120 	add.w	r1, r7, #32
 8000cd4:	440b      	add	r3, r1
 8000cd6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000cda:	b21b      	sxth	r3, r3
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b21a      	sxth	r2, r3
 8000ce0:	4b64      	ldr	r3, [pc, #400]	; (8000e74 <BMP180_Get_Calibration_Value+0x310>)
 8000ce2:	801a      	strh	r2, [r3, #0]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	61fb      	str	r3, [r7, #28]
	MB =  (int16_t)callbuff[a] << 8 | callbuff[a+1]; a+=2;
 8000cea:	1d3a      	adds	r2, r7, #4
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	4413      	add	r3, r2
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	f107 0120 	add.w	r1, r7, #32
 8000cfe:	440b      	add	r3, r1
 8000d00:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d04:	b21b      	sxth	r3, r3
 8000d06:	4313      	orrs	r3, r2
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	4b5b      	ldr	r3, [pc, #364]	; (8000e78 <BMP180_Get_Calibration_Value+0x314>)
 8000d0c:	801a      	strh	r2, [r3, #0]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3302      	adds	r3, #2
 8000d12:	61fb      	str	r3, [r7, #28]
	MC =  (int16_t)callbuff[a] << 8 | callbuff[a+1]; a+=2;
 8000d14:	1d3a      	adds	r2, r7, #4
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	b21a      	sxth	r2, r3
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	3301      	adds	r3, #1
 8000d24:	f107 0120 	add.w	r1, r7, #32
 8000d28:	440b      	add	r3, r1
 8000d2a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	4313      	orrs	r3, r2
 8000d32:	b21a      	sxth	r2, r3
 8000d34:	4b51      	ldr	r3, [pc, #324]	; (8000e7c <BMP180_Get_Calibration_Value+0x318>)
 8000d36:	801a      	strh	r2, [r3, #0]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	61fb      	str	r3, [r7, #28]
	MD =  (int16_t)callbuff[a] << 8 | callbuff[a+1]; a+=2;
 8000d3e:	1d3a      	adds	r2, r7, #4
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	4413      	add	r3, r2
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	021b      	lsls	r3, r3, #8
 8000d48:	b21a      	sxth	r2, r3
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	f107 0120 	add.w	r1, r7, #32
 8000d52:	440b      	add	r3, r1
 8000d54:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b21a      	sxth	r2, r3
 8000d5e:	4b48      	ldr	r3, [pc, #288]	; (8000e80 <BMP180_Get_Calibration_Value+0x31c>)
 8000d60:	801a      	strh	r2, [r3, #0]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3302      	adds	r3, #2
 8000d66:	61fb      	str	r3, [r7, #28]


	if(AC1 == 0x0000  || AC1 == 0xFFFF){
 8000d68:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <BMP180_Get_Calibration_Value+0x2f4>)
 8000d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d105      	bne.n	8000d7e <BMP180_Get_Calibration_Value+0x21a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d78:	4842      	ldr	r0, [pc, #264]	; (8000e84 <BMP180_Get_Calibration_Value+0x320>)
 8000d7a:	f000 ff6f 	bl	8001c5c <HAL_GPIO_WritePin>
	}
	if(AC2 == 0x0000  || AC2 == 0xFFFF){
 8000d7e:	4b37      	ldr	r3, [pc, #220]	; (8000e5c <BMP180_Get_Calibration_Value+0x2f8>)
 8000d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d105      	bne.n	8000d94 <BMP180_Get_Calibration_Value+0x230>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8e:	483d      	ldr	r0, [pc, #244]	; (8000e84 <BMP180_Get_Calibration_Value+0x320>)
 8000d90:	f000 ff64 	bl	8001c5c <HAL_GPIO_WritePin>
		}
	if(AC3 == 0x0000  || AC3 == 0xFFFF){
 8000d94:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <BMP180_Get_Calibration_Value+0x2fc>)
 8000d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d105      	bne.n	8000daa <BMP180_Get_Calibration_Value+0x246>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da4:	4837      	ldr	r0, [pc, #220]	; (8000e84 <BMP180_Get_Calibration_Value+0x320>)
 8000da6:	f000 ff59 	bl	8001c5c <HAL_GPIO_WritePin>
		}
	if(AC4 == 0x0000  || AC4 == 0xFFFF){
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <BMP180_Get_Calibration_Value+0x300>)
 8000dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d105      	bne.n	8000dc0 <BMP180_Get_Calibration_Value+0x25c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dba:	4832      	ldr	r0, [pc, #200]	; (8000e84 <BMP180_Get_Calibration_Value+0x320>)
 8000dbc:	f000 ff4e 	bl	8001c5c <HAL_GPIO_WritePin>
		}
	if(AC5 == 0x0000  || AC5 == 0xFFFF){
 8000dc0:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <BMP180_Get_Calibration_Value+0x304>)
 8000dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d105      	bne.n	8000dd6 <BMP180_Get_Calibration_Value+0x272>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd0:	482c      	ldr	r0, [pc, #176]	; (8000e84 <BMP180_Get_Calibration_Value+0x320>)
 8000dd2:	f000 ff43 	bl	8001c5c <HAL_GPIO_WritePin>
		}
	if(AC6 == 0x0000  || AC6 == 0xFFFF){
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <BMP180_Get_Calibration_Value+0x308>)
 8000dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d105      	bne.n	8000dec <BMP180_Get_Calibration_Value+0x288>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de6:	4827      	ldr	r0, [pc, #156]	; (8000e84 <BMP180_Get_Calibration_Value+0x320>)
 8000de8:	f000 ff38 	bl	8001c5c <HAL_GPIO_WritePin>
		}
	if(B1 == 0x0000  || B1 == 0xFFFF){
 8000dec:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <BMP180_Get_Calibration_Value+0x30c>)
 8000dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d105      	bne.n	8000e02 <BMP180_Get_Calibration_Value+0x29e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dfc:	4821      	ldr	r0, [pc, #132]	; (8000e84 <BMP180_Get_Calibration_Value+0x320>)
 8000dfe:	f000 ff2d 	bl	8001c5c <HAL_GPIO_WritePin>
		}
	if(B2 == 0x0000  || B2 == 0xFFFF){
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <BMP180_Get_Calibration_Value+0x310>)
 8000e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d105      	bne.n	8000e18 <BMP180_Get_Calibration_Value+0x2b4>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e12:	481c      	ldr	r0, [pc, #112]	; (8000e84 <BMP180_Get_Calibration_Value+0x320>)
 8000e14:	f000 ff22 	bl	8001c5c <HAL_GPIO_WritePin>
		}
	if(MB == 0x0000  || MB == 0xFFFF){
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <BMP180_Get_Calibration_Value+0x314>)
 8000e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d105      	bne.n	8000e2e <BMP180_Get_Calibration_Value+0x2ca>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e28:	4816      	ldr	r0, [pc, #88]	; (8000e84 <BMP180_Get_Calibration_Value+0x320>)
 8000e2a:	f000 ff17 	bl	8001c5c <HAL_GPIO_WritePin>
		}
	if(MC == 0x0000  || MC == 0xFFFF){
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <BMP180_Get_Calibration_Value+0x318>)
 8000e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d105      	bne.n	8000e44 <BMP180_Get_Calibration_Value+0x2e0>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <BMP180_Get_Calibration_Value+0x320>)
 8000e40:	f000 ff0c 	bl	8001c5c <HAL_GPIO_WritePin>
		}
	if(MD == 0x0000  || MD == 0xFFFF){
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <BMP180_Get_Calibration_Value+0x31c>)
 8000e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d122      	bne.n	8000e94 <BMP180_Get_Calibration_Value+0x330>
 8000e4e:	e01b      	b.n	8000e88 <BMP180_Get_Calibration_Value+0x324>
 8000e50:	000186a0 	.word	0x000186a0
 8000e54:	20000084 	.word	0x20000084
 8000e58:	2000002a 	.word	0x2000002a
 8000e5c:	2000005c 	.word	0x2000005c
 8000e60:	2000005e 	.word	0x2000005e
 8000e64:	20000042 	.word	0x20000042
 8000e68:	20000040 	.word	0x20000040
 8000e6c:	2000002c 	.word	0x2000002c
 8000e70:	20000076 	.word	0x20000076
 8000e74:	20000060 	.word	0x20000060
 8000e78:	20000054 	.word	0x20000054
 8000e7c:	20000078 	.word	0x20000078
 8000e80:	20000028 	.word	0x20000028
 8000e84:	40020c00 	.word	0x40020c00
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e8e:	4803      	ldr	r0, [pc, #12]	; (8000e9c <BMP180_Get_Calibration_Value+0x338>)
 8000e90:	f000 fee4 	bl	8001c5c <HAL_GPIO_WritePin>
		}



}
 8000e94:	bf00      	nop
 8000e96:	3720      	adds	r7, #32
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40020c00 	.word	0x40020c00

08000ea0 <BMP180_Get_Temperature>:

void BMP180_Get_Temperature(){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0

	BMP180_Get_Calibration_Value();
 8000ea4:	f7ff fe5e 	bl	8000b64 <BMP180_Get_Calibration_Value>

	tX1 = ((int32_t)unCompTemperature - (int32_t)AC6) * (int32_t) AC5 * ((float) 0.000030517578125);
 8000ea8:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <BMP180_Get_Temperature+0xac>)
 8000eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <BMP180_Get_Temperature+0xb0>)
 8000eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	4a26      	ldr	r2, [pc, #152]	; (8000f54 <BMP180_Get_Temperature+0xb4>)
 8000eba:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ebe:	fb02 f303 	mul.w	r3, r2, r3
 8000ec2:	ee07 3a90 	vmov	s15, r3
 8000ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eca:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000f58 <BMP180_Get_Temperature+0xb8>
 8000ece:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ed2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ed6:	ee17 2a90 	vmov	r2, s15
 8000eda:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <BMP180_Get_Temperature+0xbc>)
 8000edc:	601a      	str	r2, [r3, #0]
	tX2 = ((int32_t)MC * 2048) / (tX1 + (int32_t)MD);
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <BMP180_Get_Temperature+0xc0>)
 8000ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee4:	02da      	lsls	r2, r3, #11
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <BMP180_Get_Temperature+0xc4>)
 8000ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eec:	4619      	mov	r1, r3
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <BMP180_Get_Temperature+0xbc>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	440b      	add	r3, r1
 8000ef4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ef8:	4a1b      	ldr	r2, [pc, #108]	; (8000f68 <BMP180_Get_Temperature+0xc8>)
 8000efa:	6013      	str	r3, [r2, #0]

	if(tX1 == 0 && MD ==0){
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <BMP180_Get_Temperature+0xbc>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d10b      	bne.n	8000f1c <BMP180_Get_Temperature+0x7c>
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <BMP180_Get_Temperature+0xc4>)
 8000f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d106      	bne.n	8000f1c <BMP180_Get_Temperature+0x7c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f14:	4815      	ldr	r0, [pc, #84]	; (8000f6c <BMP180_Get_Temperature+0xcc>)
 8000f16:	f000 fea1 	bl	8001c5c <HAL_GPIO_WritePin>
		while(1);
 8000f1a:	e7fe      	b.n	8000f1a <BMP180_Get_Temperature+0x7a>
	}

	tB5 = tX1 + tX2;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <BMP180_Get_Temperature+0xbc>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <BMP180_Get_Temperature+0xc8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <BMP180_Get_Temperature+0xd0>)
 8000f28:	6013      	str	r3, [r2, #0]
	Temperature = ((float) (tB5 + 8)) / ((float)160);
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <BMP180_Get_Temperature+0xd0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	3308      	adds	r3, #8
 8000f30:	ee07 3a90 	vmov	s15, r3
 8000f34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f38:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000f74 <BMP180_Get_Temperature+0xd4>
 8000f3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f40:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <BMP180_Get_Temperature+0xd8>)
 8000f42:	edc3 7a00 	vstr	s15, [r3]
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000074 	.word	0x20000074
 8000f50:	2000002c 	.word	0x2000002c
 8000f54:	20000040 	.word	0x20000040
 8000f58:	38000000 	.word	0x38000000
 8000f5c:	20000080 	.word	0x20000080
 8000f60:	20000078 	.word	0x20000078
 8000f64:	20000028 	.word	0x20000028
 8000f68:	2000004c 	.word	0x2000004c
 8000f6c:	40020c00 	.word	0x40020c00
 8000f70:	20000064 	.word	0x20000064
 8000f74:	43200000 	.word	0x43200000
 8000f78:	20000030 	.word	0x20000030
 8000f7c:	00000000 	.word	0x00000000

08000f80 <BMP180_Get_Presure>:
	unCompTemperature = (int16_t)((rData[0]<<8) | rData[1]);

}


void BMP180_Get_Presure(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0

	BMP180_Get_Uncompansated_Presure();
 8000f84:	f000 f94a 	bl	800121c <BMP180_Get_Uncompansated_Presure>

	pB6 = tB5 - 4000;
 8000f88:	4b8f      	ldr	r3, [pc, #572]	; (80011c8 <BMP180_Get_Presure+0x248>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8000f90:	4a8e      	ldr	r2, [pc, #568]	; (80011cc <BMP180_Get_Presure+0x24c>)
 8000f92:	6013      	str	r3, [r2, #0]
	pX1 = (B2 * (pB6 * pB6 / 4096)) / 2048;
 8000f94:	4b8e      	ldr	r3, [pc, #568]	; (80011d0 <BMP180_Get_Presure+0x250>)
 8000f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4b8b      	ldr	r3, [pc, #556]	; (80011cc <BMP180_Get_Presure+0x24c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a8a      	ldr	r2, [pc, #552]	; (80011cc <BMP180_Get_Presure+0x24c>)
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	da01      	bge.n	8000fb0 <BMP180_Get_Presure+0x30>
 8000fac:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000fb0:	131b      	asrs	r3, r3, #12
 8000fb2:	fb03 f301 	mul.w	r3, r3, r1
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	da01      	bge.n	8000fbe <BMP180_Get_Presure+0x3e>
 8000fba:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000fbe:	12db      	asrs	r3, r3, #11
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b84      	ldr	r3, [pc, #528]	; (80011d4 <BMP180_Get_Presure+0x254>)
 8000fc4:	601a      	str	r2, [r3, #0]
	pX2 = AC2 * pB6 /2048;
 8000fc6:	4b84      	ldr	r3, [pc, #528]	; (80011d8 <BMP180_Get_Presure+0x258>)
 8000fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b7f      	ldr	r3, [pc, #508]	; (80011cc <BMP180_Get_Presure+0x24c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	fb03 f302 	mul.w	r3, r3, r2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	da01      	bge.n	8000fde <BMP180_Get_Presure+0x5e>
 8000fda:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000fde:	12db      	asrs	r3, r3, #11
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b7e      	ldr	r3, [pc, #504]	; (80011dc <BMP180_Get_Presure+0x25c>)
 8000fe4:	601a      	str	r2, [r3, #0]
	pX3 = pX1 + pX2;
 8000fe6:	4b7b      	ldr	r3, [pc, #492]	; (80011d4 <BMP180_Get_Presure+0x254>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4b7c      	ldr	r3, [pc, #496]	; (80011dc <BMP180_Get_Presure+0x25c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a7b      	ldr	r2, [pc, #492]	; (80011e0 <BMP180_Get_Presure+0x260>)
 8000ff2:	6013      	str	r3, [r2, #0]
	pB3 = (((AC1 * 4 + pX3) << (uint8_t)0x03) + 2) /4;
 8000ff4:	4b7b      	ldr	r3, [pc, #492]	; (80011e4 <BMP180_Get_Presure+0x264>)
 8000ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffa:	009a      	lsls	r2, r3, #2
 8000ffc:	4b78      	ldr	r3, [pc, #480]	; (80011e0 <BMP180_Get_Presure+0x260>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4413      	add	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	3302      	adds	r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	da00      	bge.n	800100c <BMP180_Get_Presure+0x8c>
 800100a:	3303      	adds	r3, #3
 800100c:	109b      	asrs	r3, r3, #2
 800100e:	461a      	mov	r2, r3
 8001010:	4b75      	ldr	r3, [pc, #468]	; (80011e8 <BMP180_Get_Presure+0x268>)
 8001012:	601a      	str	r2, [r3, #0]
	pX1 = AC3 * pB6 /8192;
 8001014:	4b75      	ldr	r3, [pc, #468]	; (80011ec <BMP180_Get_Presure+0x26c>)
 8001016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101a:	461a      	mov	r2, r3
 800101c:	4b6b      	ldr	r3, [pc, #428]	; (80011cc <BMP180_Get_Presure+0x24c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	fb03 f302 	mul.w	r3, r3, r2
 8001024:	2b00      	cmp	r3, #0
 8001026:	da02      	bge.n	800102e <BMP180_Get_Presure+0xae>
 8001028:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800102c:	331f      	adds	r3, #31
 800102e:	135b      	asrs	r3, r3, #13
 8001030:	461a      	mov	r2, r3
 8001032:	4b68      	ldr	r3, [pc, #416]	; (80011d4 <BMP180_Get_Presure+0x254>)
 8001034:	601a      	str	r2, [r3, #0]
	pX2 = (B1 * (pB6 * pB6 / 4096 )) / 65536;
 8001036:	4b6e      	ldr	r3, [pc, #440]	; (80011f0 <BMP180_Get_Presure+0x270>)
 8001038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103c:	4619      	mov	r1, r3
 800103e:	4b63      	ldr	r3, [pc, #396]	; (80011cc <BMP180_Get_Presure+0x24c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a62      	ldr	r2, [pc, #392]	; (80011cc <BMP180_Get_Presure+0x24c>)
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	fb02 f303 	mul.w	r3, r2, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	da01      	bge.n	8001052 <BMP180_Get_Presure+0xd2>
 800104e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001052:	131b      	asrs	r3, r3, #12
 8001054:	fb03 f301 	mul.w	r3, r3, r1
 8001058:	2b00      	cmp	r3, #0
 800105a:	da02      	bge.n	8001062 <BMP180_Get_Presure+0xe2>
 800105c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001060:	33ff      	adds	r3, #255	; 0xff
 8001062:	141b      	asrs	r3, r3, #16
 8001064:	461a      	mov	r2, r3
 8001066:	4b5d      	ldr	r3, [pc, #372]	; (80011dc <BMP180_Get_Presure+0x25c>)
 8001068:	601a      	str	r2, [r3, #0]
	pX3 = ((pX1 + pX2) + 2) / 4;
 800106a:	4b5a      	ldr	r3, [pc, #360]	; (80011d4 <BMP180_Get_Presure+0x254>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	4b5b      	ldr	r3, [pc, #364]	; (80011dc <BMP180_Get_Presure+0x25c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	3302      	adds	r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	da00      	bge.n	800107c <BMP180_Get_Presure+0xfc>
 800107a:	3303      	adds	r3, #3
 800107c:	109b      	asrs	r3, r3, #2
 800107e:	461a      	mov	r2, r3
 8001080:	4b57      	ldr	r3, [pc, #348]	; (80011e0 <BMP180_Get_Presure+0x260>)
 8001082:	601a      	str	r2, [r3, #0]
	pB4 = AC4 * (unsigned long)(pX3 + 32768) / 32768;
 8001084:	4b5b      	ldr	r3, [pc, #364]	; (80011f4 <BMP180_Get_Presure+0x274>)
 8001086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108a:	461a      	mov	r2, r3
 800108c:	4b54      	ldr	r3, [pc, #336]	; (80011e0 <BMP180_Get_Presure+0x260>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001094:	fb03 f302 	mul.w	r3, r3, r2
 8001098:	0bdb      	lsrs	r3, r3, #15
 800109a:	461a      	mov	r2, r3
 800109c:	4b56      	ldr	r3, [pc, #344]	; (80011f8 <BMP180_Get_Presure+0x278>)
 800109e:	601a      	str	r2, [r3, #0]
	pB7 = ((unsigned long)unCompPresure - pB3) * (50000 >> (uint8_t)0x03);
 80010a0:	4b56      	ldr	r3, [pc, #344]	; (80011fc <BMP180_Get_Presure+0x27c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a50      	ldr	r2, [pc, #320]	; (80011e8 <BMP180_Get_Presure+0x268>)
 80010a6:	6812      	ldr	r2, [r2, #0]
 80010a8:	1a9b      	subs	r3, r3, r2
 80010aa:	f641 026a 	movw	r2, #6250	; 0x186a
 80010ae:	fb02 f303 	mul.w	r3, r2, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b52      	ldr	r3, [pc, #328]	; (8001200 <BMP180_Get_Presure+0x280>)
 80010b6:	601a      	str	r2, [r3, #0]

	if(pB7 < 0x80000000){
 80010b8:	4b51      	ldr	r3, [pc, #324]	; (8001200 <BMP180_Get_Presure+0x280>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0e      	blt.n	80010de <BMP180_Get_Presure+0x15e>
		presure = (pB7 * 2) / pB4;
 80010c0:	4b4f      	ldr	r3, [pc, #316]	; (8001200 <BMP180_Get_Presure+0x280>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	005a      	lsls	r2, r3, #1
 80010c6:	4b4c      	ldr	r3, [pc, #304]	; (80011f8 <BMP180_Get_Presure+0x278>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d6:	4b4b      	ldr	r3, [pc, #300]	; (8001204 <BMP180_Get_Presure+0x284>)
 80010d8:	edc3 7a00 	vstr	s15, [r3]
 80010dc:	e00d      	b.n	80010fa <BMP180_Get_Presure+0x17a>
	}
	else{
		presure = (pB7 / pB8) * 2;
 80010de:	4b48      	ldr	r3, [pc, #288]	; (8001200 <BMP180_Get_Presure+0x280>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b49      	ldr	r3, [pc, #292]	; (8001208 <BMP180_Get_Presure+0x288>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f4:	4b43      	ldr	r3, [pc, #268]	; (8001204 <BMP180_Get_Presure+0x284>)
 80010f6:	edc3 7a00 	vstr	s15, [r3]
	}

	pX1 = (presure / 256) * (presure /256);
 80010fa:	4b42      	ldr	r3, [pc, #264]	; (8001204 <BMP180_Get_Presure+0x284>)
 80010fc:	edd3 7a00 	vldr	s15, [r3]
 8001100:	eddf 6a42 	vldr	s13, [pc, #264]	; 800120c <BMP180_Get_Presure+0x28c>
 8001104:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001108:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <BMP180_Get_Presure+0x284>)
 800110a:	edd3 6a00 	vldr	s13, [r3]
 800110e:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 800120c <BMP180_Get_Presure+0x28c>
 8001112:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800111a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800111e:	ee17 2a90 	vmov	r2, s15
 8001122:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <BMP180_Get_Presure+0x254>)
 8001124:	601a      	str	r2, [r3, #0]
	pX1 = (pX1 * 3038) / 65536;
 8001126:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <BMP180_Get_Presure+0x254>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f640 32de 	movw	r2, #3038	; 0xbde
 800112e:	fb02 f303 	mul.w	r3, r2, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	da02      	bge.n	800113c <BMP180_Get_Presure+0x1bc>
 8001136:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800113a:	33ff      	adds	r3, #255	; 0xff
 800113c:	141b      	asrs	r3, r3, #16
 800113e:	461a      	mov	r2, r3
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <BMP180_Get_Presure+0x254>)
 8001142:	601a      	str	r2, [r3, #0]
	pX2 = (-7357 * presure) / 65536;
 8001144:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <BMP180_Get_Presure+0x284>)
 8001146:	edd3 7a00 	vldr	s15, [r3]
 800114a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001210 <BMP180_Get_Presure+0x290>
 800114e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001152:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001214 <BMP180_Get_Presure+0x294>
 8001156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800115e:	ee17 2a90 	vmov	r2, s15
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <BMP180_Get_Presure+0x25c>)
 8001164:	601a      	str	r2, [r3, #0]
	presure = presure + (pX1 + pX2 + 3791) / 16;
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <BMP180_Get_Presure+0x254>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <BMP180_Get_Presure+0x25c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001174:	2b00      	cmp	r3, #0
 8001176:	da00      	bge.n	800117a <BMP180_Get_Presure+0x1fa>
 8001178:	330f      	adds	r3, #15
 800117a:	111b      	asrs	r3, r3, #4
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <BMP180_Get_Presure+0x284>)
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <BMP180_Get_Presure+0x284>)
 8001190:	edc3 7a00 	vstr	s15, [r3]
	presureATM = presure * 0.00000986923;
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <BMP180_Get_Presure+0x284>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff faa3 	bl	80006e4 <__aeabi_f2d>
 800119e:	a308      	add	r3, pc, #32	; (adr r3, 80011c0 <BMP180_Get_Presure+0x240>)
 80011a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a4:	f7ff f810 	bl	80001c8 <__aeabi_dmul>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff faf0 	bl	8000794 <__aeabi_d2f>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a18      	ldr	r2, [pc, #96]	; (8001218 <BMP180_Get_Presure+0x298>)
 80011b8:	6013      	str	r3, [r2, #0]



}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	a48cde11 	.word	0xa48cde11
 80011c4:	3ee4b280 	.word	0x3ee4b280
 80011c8:	20000064 	.word	0x20000064
 80011cc:	2000006c 	.word	0x2000006c
 80011d0:	20000060 	.word	0x20000060
 80011d4:	20000048 	.word	0x20000048
 80011d8:	2000005c 	.word	0x2000005c
 80011dc:	2000003c 	.word	0x2000003c
 80011e0:	20000050 	.word	0x20000050
 80011e4:	2000002a 	.word	0x2000002a
 80011e8:	20000034 	.word	0x20000034
 80011ec:	2000005e 	.word	0x2000005e
 80011f0:	20000076 	.word	0x20000076
 80011f4:	20000042 	.word	0x20000042
 80011f8:	2000007c 	.word	0x2000007c
 80011fc:	20000044 	.word	0x20000044
 8001200:	20000068 	.word	0x20000068
 8001204:	20000038 	.word	0x20000038
 8001208:	20000070 	.word	0x20000070
 800120c:	43800000 	.word	0x43800000
 8001210:	c5e5e800 	.word	0xc5e5e800
 8001214:	47800000 	.word	0x47800000
 8001218:	20000058 	.word	0x20000058

0800121c <BMP180_Get_Uncompansated_Presure>:


void BMP180_Get_Uncompansated_Presure(){
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af04      	add	r7, sp, #16

	uint8_t rData[3] = {0};
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <BMP180_Get_Uncompansated_Presure+0x6c>)
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	80bb      	strh	r3, [r7, #4]
 8001228:	2300      	movs	r3, #0
 800122a:	71bb      	strb	r3, [r7, #6]
	uint8_t wData[1];
	wData[0] = 0x34 | (0x03 << 6);
 800122c:	23f4      	movs	r3, #244	; 0xf4
 800122e:	703b      	strb	r3, [r7, #0]

	HAL_I2C_Mem_Write(&hi2c1, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 0xF4, 1, wData, 1, 100000);
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <BMP180_Get_Uncompansated_Presure+0x70>)
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	2301      	movs	r3, #1
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	463b      	mov	r3, r7
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2301      	movs	r3, #1
 800123e:	22f4      	movs	r2, #244	; 0xf4
 8001240:	21ee      	movs	r1, #238	; 0xee
 8001242:	4813      	ldr	r0, [pc, #76]	; (8001290 <BMP180_Get_Uncompansated_Presure+0x74>)
 8001244:	f000 fe68 	bl	8001f18 <HAL_I2C_Mem_Write>
	HAL_Delay(26);
 8001248:	201a      	movs	r0, #26
 800124a:	f000 fa61 	bl	8001710 <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1,BMP180_DEVICE_READ_REGISTER_ADDRESS,0xF6,1,rData,3,100000);
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <BMP180_Get_Uncompansated_Presure+0x70>)
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	2303      	movs	r3, #3
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	22f6      	movs	r2, #246	; 0xf6
 800125e:	21ef      	movs	r1, #239	; 0xef
 8001260:	480b      	ldr	r0, [pc, #44]	; (8001290 <BMP180_Get_Uncompansated_Presure+0x74>)
 8001262:	f000 ff53 	bl	800210c <HAL_I2C_Mem_Read>

	unCompPresure = (rData[0]<<16 | rData[1] << 8 | rData[2] >> (8 - (uint8_t )0x03));
 8001266:	793b      	ldrb	r3, [r7, #4]
 8001268:	041a      	lsls	r2, r3, #16
 800126a:	797b      	ldrb	r3, [r7, #5]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	4313      	orrs	r3, r2
 8001270:	79ba      	ldrb	r2, [r7, #6]
 8001272:	0952      	lsrs	r2, r2, #5
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	4313      	orrs	r3, r2
 8001278:	461a      	mov	r2, r3
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <BMP180_Get_Uncompansated_Presure+0x78>)
 800127c:	601a      	str	r2, [r3, #0]

}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	0800379c 	.word	0x0800379c
 800128c:	000186a0 	.word	0x000186a0
 8001290:	20000084 	.word	0x20000084
 8001294:	20000044 	.word	0x20000044

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129c:	f000 f9c6 	bl	800162c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a0:	f000 f80c 	bl	80012bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a4:	f000 f8a2 	bl	80013ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80012a8:	f000 f872 	bl	8001390 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  BMP180_Init();
 80012ac:	f7ff fc3e 	bl	8000b2c <BMP180_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  BMP180_Get_Temperature();
 80012b0:	f7ff fdf6 	bl	8000ea0 <BMP180_Get_Temperature>
	  BMP180_Get_Presure();
 80012b4:	f7ff fe64 	bl	8000f80 <BMP180_Get_Presure>
	  BMP180_Get_Temperature();
 80012b8:	e7fa      	b.n	80012b0 <main+0x18>
	...

080012bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b094      	sub	sp, #80	; 0x50
 80012c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c2:	f107 0320 	add.w	r3, r7, #32
 80012c6:	2230      	movs	r2, #48	; 0x30
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f002 fa52 	bl	8003774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	4b28      	ldr	r3, [pc, #160]	; (8001388 <SystemClock_Config+0xcc>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	4a27      	ldr	r2, [pc, #156]	; (8001388 <SystemClock_Config+0xcc>)
 80012ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ee:	6413      	str	r3, [r2, #64]	; 0x40
 80012f0:	4b25      	ldr	r3, [pc, #148]	; (8001388 <SystemClock_Config+0xcc>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	4b22      	ldr	r3, [pc, #136]	; (800138c <SystemClock_Config+0xd0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a21      	ldr	r2, [pc, #132]	; (800138c <SystemClock_Config+0xd0>)
 8001306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <SystemClock_Config+0xd0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001318:	2302      	movs	r3, #2
 800131a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800131c:	2301      	movs	r3, #1
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001320:	2310      	movs	r3, #16
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001324:	2302      	movs	r3, #2
 8001326:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001328:	2300      	movs	r3, #0
 800132a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800132c:	2308      	movs	r3, #8
 800132e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001330:	23a8      	movs	r3, #168	; 0xa8
 8001332:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001334:	2302      	movs	r3, #2
 8001336:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001338:	2307      	movs	r3, #7
 800133a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133c:	f107 0320 	add.w	r3, r7, #32
 8001340:	4618      	mov	r0, r3
 8001342:	f001 fd93 	bl	8002e6c <HAL_RCC_OscConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800134c:	f000 f892 	bl	8001474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001350:	230f      	movs	r3, #15
 8001352:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001354:	2302      	movs	r3, #2
 8001356:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800135c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001360:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001366:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2105      	movs	r1, #5
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fff4 	bl	800335c <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800137a:	f000 f87b 	bl	8001474 <Error_Handler>
  }
}
 800137e:	bf00      	nop
 8001380:	3750      	adds	r7, #80	; 0x50
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40007000 	.word	0x40007000

08001390 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_I2C1_Init+0x50>)
 8001396:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <MX_I2C1_Init+0x54>)
 8001398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_I2C1_Init+0x50>)
 800139c:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <MX_I2C1_Init+0x58>)
 800139e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_I2C1_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_I2C1_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_I2C1_Init+0x50>)
 80013ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <MX_I2C1_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_I2C1_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <MX_I2C1_Init+0x50>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_I2C1_Init+0x50>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_I2C1_Init+0x50>)
 80013ce:	f000 fc5f 	bl	8001c90 <HAL_I2C_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013d8:	f000 f84c 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000084 	.word	0x20000084
 80013e4:	40005400 	.word	0x40005400
 80013e8:	00061a80 	.word	0x00061a80

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_GPIO_Init+0x80>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a18      	ldr	r2, [pc, #96]	; (800146c <MX_GPIO_Init+0x80>)
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_GPIO_Init+0x80>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <MX_GPIO_Init+0x80>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a11      	ldr	r2, [pc, #68]	; (800146c <MX_GPIO_Init+0x80>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_GPIO_Init+0x80>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001440:	480b      	ldr	r0, [pc, #44]	; (8001470 <MX_GPIO_Init+0x84>)
 8001442:	f000 fc0b 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001446:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800144a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	4619      	mov	r1, r3
 800145e:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_GPIO_Init+0x84>)
 8001460:	f000 fa60 	bl	8001924 <HAL_GPIO_Init>

}
 8001464:	bf00      	nop
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	40020c00 	.word	0x40020c00

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800147c:	e7fe      	b.n	800147c <Error_Handler+0x8>
	...

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_MspInit+0x4c>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	4a0f      	ldr	r2, [pc, #60]	; (80014cc <HAL_MspInit+0x4c>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001494:	6453      	str	r3, [r2, #68]	; 0x44
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <HAL_MspInit+0x4c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_MspInit+0x4c>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	4a08      	ldr	r2, [pc, #32]	; (80014cc <HAL_MspInit+0x4c>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6413      	str	r3, [r2, #64]	; 0x40
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014be:	2007      	movs	r0, #7
 80014c0:	f000 f9fc 	bl	80018bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800

080014d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a19      	ldr	r2, [pc, #100]	; (8001554 <HAL_I2C_MspInit+0x84>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d12b      	bne.n	800154a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_I2C_MspInit+0x88>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a17      	ldr	r2, [pc, #92]	; (8001558 <HAL_I2C_MspInit+0x88>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_I2C_MspInit+0x88>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800150e:	23c0      	movs	r3, #192	; 0xc0
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001512:	2312      	movs	r3, #18
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800151e:	2304      	movs	r3, #4
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <HAL_I2C_MspInit+0x8c>)
 800152a:	f000 f9fb 	bl	8001924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_I2C_MspInit+0x88>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_I2C_MspInit+0x88>)
 8001538:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_I2C_MspInit+0x88>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40005400 	.word	0x40005400
 8001558:	40023800 	.word	0x40023800
 800155c:	40020400 	.word	0x40020400

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <NMI_Handler+0x4>

08001566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <MemManage_Handler+0x4>

08001572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler+0x4>

0800157e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ac:	f000 f890 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <SystemInit+0x20>)
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <SystemInit+0x20>)
 80015c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001610 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015de:	490e      	ldr	r1, [pc, #56]	; (8001618 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e4:	e002      	b.n	80015ec <LoopCopyDataInit>

080015e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ea:	3304      	adds	r3, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f0:	d3f9      	bcc.n	80015e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015f4:	4c0b      	ldr	r4, [pc, #44]	; (8001624 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f8:	e001      	b.n	80015fe <LoopFillZerobss>

080015fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fc:	3204      	adds	r2, #4

080015fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001600:	d3fb      	bcc.n	80015fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001602:	f7ff ffd7 	bl	80015b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001606:	f002 f891 	bl	800372c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160a:	f7ff fe45 	bl	8001298 <main>
  bx  lr    
 800160e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001610:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800161c:	080037c8 	.word	0x080037c8
  ldr r2, =_sbss
 8001620:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001624:	200000dc 	.word	0x200000dc

08001628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC_IRQHandler>
	...

0800162c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0d      	ldr	r2, [pc, #52]	; (800166c <HAL_Init+0x40>)
 8001636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0a      	ldr	r2, [pc, #40]	; (800166c <HAL_Init+0x40>)
 8001642:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001646:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_Init+0x40>)
 800164e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001652:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001654:	2003      	movs	r0, #3
 8001656:	f000 f931 	bl	80018bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165a:	2000      	movs	r0, #0
 800165c:	f000 f808 	bl	8001670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001660:	f7ff ff0e 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023c00 	.word	0x40023c00

08001670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_InitTick+0x54>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x58>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001686:	fbb3 f3f1 	udiv	r3, r3, r1
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f93b 	bl	800190a <HAL_SYSTICK_Config>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e00e      	b.n	80016bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d80a      	bhi.n	80016ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f000 f911 	bl	80018d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b0:	4a06      	ldr	r2, [pc, #24]	; (80016cc <HAL_InitTick+0x5c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000004 	.word	0x20000004

080016d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x24>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <HAL_IncTick+0x24>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000008 	.word	0x20000008
 80016f4:	200000d8 	.word	0x200000d8

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200000d8 	.word	0x200000d8

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff ffee 	bl	80016f8 <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_Delay+0x44>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001736:	bf00      	nop
 8001738:	f7ff ffde 	bl	80016f8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db0a      	blt.n	80017e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	490c      	ldr	r1, [pc, #48]	; (8001808 <__NVIC_SetPriority+0x4c>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	440b      	add	r3, r1
 80017e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e4:	e00a      	b.n	80017fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4908      	ldr	r1, [pc, #32]	; (800180c <__NVIC_SetPriority+0x50>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	3b04      	subs	r3, #4
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	761a      	strb	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	2b04      	cmp	r3, #4
 800182c:	bf28      	it	cs
 800182e:	2304      	movcs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3304      	adds	r3, #4
 8001836:	2b06      	cmp	r3, #6
 8001838:	d902      	bls.n	8001840 <NVIC_EncodePriority+0x30>
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3b03      	subs	r3, #3
 800183e:	e000      	b.n	8001842 <NVIC_EncodePriority+0x32>
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	f04f 32ff 	mov.w	r2, #4294967295
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	401a      	ands	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001858:	f04f 31ff 	mov.w	r1, #4294967295
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43d9      	mvns	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	4313      	orrs	r3, r2
         );
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001888:	d301      	bcc.n	800188e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188a:	2301      	movs	r3, #1
 800188c:	e00f      	b.n	80018ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <SysTick_Config+0x40>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001896:	210f      	movs	r1, #15
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f7ff ff8e 	bl	80017bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <SysTick_Config+0x40>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a6:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <SysTick_Config+0x40>)
 80018a8:	2207      	movs	r2, #7
 80018aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	e000e010 	.word	0xe000e010

080018bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ff47 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e4:	f7ff ff5c 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 80018e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	6978      	ldr	r0, [r7, #20]
 80018f0:	f7ff ff8e 	bl	8001810 <NVIC_EncodePriority>
 80018f4:	4602      	mov	r2, r0
 80018f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff5d 	bl	80017bc <__NVIC_SetPriority>
}
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ffb0 	bl	8001878 <SysTick_Config>
 8001918:	4603      	mov	r3, r0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	e16b      	b.n	8001c18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001940:	2201      	movs	r2, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	429a      	cmp	r2, r3
 800195a:	f040 815a 	bne.w	8001c12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d005      	beq.n	8001976 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001972:	2b02      	cmp	r3, #2
 8001974:	d130      	bne.n	80019d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	2203      	movs	r2, #3
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ac:	2201      	movs	r2, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 0201 	and.w	r2, r3, #1
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d017      	beq.n	8001a14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d123      	bne.n	8001a68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3208      	adds	r2, #8
 8001a62:	69b9      	ldr	r1, [r7, #24]
 8001a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0203 	and.w	r2, r3, #3
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80b4 	beq.w	8001c12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b60      	ldr	r3, [pc, #384]	; (8001c30 <HAL_GPIO_Init+0x30c>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4a5f      	ldr	r2, [pc, #380]	; (8001c30 <HAL_GPIO_Init+0x30c>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aba:	4b5d      	ldr	r3, [pc, #372]	; (8001c30 <HAL_GPIO_Init+0x30c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ac6:	4a5b      	ldr	r2, [pc, #364]	; (8001c34 <HAL_GPIO_Init+0x310>)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a52      	ldr	r2, [pc, #328]	; (8001c38 <HAL_GPIO_Init+0x314>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d02b      	beq.n	8001b4a <HAL_GPIO_Init+0x226>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a51      	ldr	r2, [pc, #324]	; (8001c3c <HAL_GPIO_Init+0x318>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d025      	beq.n	8001b46 <HAL_GPIO_Init+0x222>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a50      	ldr	r2, [pc, #320]	; (8001c40 <HAL_GPIO_Init+0x31c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d01f      	beq.n	8001b42 <HAL_GPIO_Init+0x21e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4f      	ldr	r2, [pc, #316]	; (8001c44 <HAL_GPIO_Init+0x320>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d019      	beq.n	8001b3e <HAL_GPIO_Init+0x21a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4e      	ldr	r2, [pc, #312]	; (8001c48 <HAL_GPIO_Init+0x324>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_Init+0x216>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4d      	ldr	r2, [pc, #308]	; (8001c4c <HAL_GPIO_Init+0x328>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d00d      	beq.n	8001b36 <HAL_GPIO_Init+0x212>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4c      	ldr	r2, [pc, #304]	; (8001c50 <HAL_GPIO_Init+0x32c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d007      	beq.n	8001b32 <HAL_GPIO_Init+0x20e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4b      	ldr	r2, [pc, #300]	; (8001c54 <HAL_GPIO_Init+0x330>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_GPIO_Init+0x20a>
 8001b2a:	2307      	movs	r3, #7
 8001b2c:	e00e      	b.n	8001b4c <HAL_GPIO_Init+0x228>
 8001b2e:	2308      	movs	r3, #8
 8001b30:	e00c      	b.n	8001b4c <HAL_GPIO_Init+0x228>
 8001b32:	2306      	movs	r3, #6
 8001b34:	e00a      	b.n	8001b4c <HAL_GPIO_Init+0x228>
 8001b36:	2305      	movs	r3, #5
 8001b38:	e008      	b.n	8001b4c <HAL_GPIO_Init+0x228>
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	e006      	b.n	8001b4c <HAL_GPIO_Init+0x228>
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e004      	b.n	8001b4c <HAL_GPIO_Init+0x228>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e002      	b.n	8001b4c <HAL_GPIO_Init+0x228>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <HAL_GPIO_Init+0x228>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	69fa      	ldr	r2, [r7, #28]
 8001b4e:	f002 0203 	and.w	r2, r2, #3
 8001b52:	0092      	lsls	r2, r2, #2
 8001b54:	4093      	lsls	r3, r2
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b5c:	4935      	ldr	r1, [pc, #212]	; (8001c34 <HAL_GPIO_Init+0x310>)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	089b      	lsrs	r3, r3, #2
 8001b62:	3302      	adds	r3, #2
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <HAL_GPIO_Init+0x334>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b8e:	4a32      	ldr	r2, [pc, #200]	; (8001c58 <HAL_GPIO_Init+0x334>)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_GPIO_Init+0x334>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bb8:	4a27      	ldr	r2, [pc, #156]	; (8001c58 <HAL_GPIO_Init+0x334>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <HAL_GPIO_Init+0x334>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001be2:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <HAL_GPIO_Init+0x334>)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_GPIO_Init+0x334>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c0c:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <HAL_GPIO_Init+0x334>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3301      	adds	r3, #1
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	2b0f      	cmp	r3, #15
 8001c1c:	f67f ae90 	bls.w	8001940 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3724      	adds	r7, #36	; 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40013800 	.word	0x40013800
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	40020800 	.word	0x40020800
 8001c44:	40020c00 	.word	0x40020c00
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40021400 	.word	0x40021400
 8001c50:	40021800 	.word	0x40021800
 8001c54:	40021c00 	.word	0x40021c00
 8001c58:	40013c00 	.word	0x40013c00

08001c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c78:	e003      	b.n	8001c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	041a      	lsls	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	619a      	str	r2, [r3, #24]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e12b      	b.n	8001efa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d106      	bne.n	8001cbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fc0a 	bl	80014d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2224      	movs	r2, #36	; 0x24
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0201 	bic.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ce2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cf2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cf4:	f001 fd06 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8001cf8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	4a81      	ldr	r2, [pc, #516]	; (8001f04 <HAL_I2C_Init+0x274>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d807      	bhi.n	8001d14 <HAL_I2C_Init+0x84>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4a80      	ldr	r2, [pc, #512]	; (8001f08 <HAL_I2C_Init+0x278>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	bf94      	ite	ls
 8001d0c:	2301      	movls	r3, #1
 8001d0e:	2300      	movhi	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	e006      	b.n	8001d22 <HAL_I2C_Init+0x92>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4a7d      	ldr	r2, [pc, #500]	; (8001f0c <HAL_I2C_Init+0x27c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	bf94      	ite	ls
 8001d1c:	2301      	movls	r3, #1
 8001d1e:	2300      	movhi	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0e7      	b.n	8001efa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4a78      	ldr	r2, [pc, #480]	; (8001f10 <HAL_I2C_Init+0x280>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	0c9b      	lsrs	r3, r3, #18
 8001d34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a6a      	ldr	r2, [pc, #424]	; (8001f04 <HAL_I2C_Init+0x274>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d802      	bhi.n	8001d64 <HAL_I2C_Init+0xd4>
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	3301      	adds	r3, #1
 8001d62:	e009      	b.n	8001d78 <HAL_I2C_Init+0xe8>
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	4a69      	ldr	r2, [pc, #420]	; (8001f14 <HAL_I2C_Init+0x284>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	099b      	lsrs	r3, r3, #6
 8001d76:	3301      	adds	r3, #1
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	495c      	ldr	r1, [pc, #368]	; (8001f04 <HAL_I2C_Init+0x274>)
 8001d94:	428b      	cmp	r3, r1
 8001d96:	d819      	bhi.n	8001dcc <HAL_I2C_Init+0x13c>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1e59      	subs	r1, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001da6:	1c59      	adds	r1, r3, #1
 8001da8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001dac:	400b      	ands	r3, r1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00a      	beq.n	8001dc8 <HAL_I2C_Init+0x138>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1e59      	subs	r1, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc6:	e051      	b.n	8001e6c <HAL_I2C_Init+0x1dc>
 8001dc8:	2304      	movs	r3, #4
 8001dca:	e04f      	b.n	8001e6c <HAL_I2C_Init+0x1dc>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d111      	bne.n	8001df8 <HAL_I2C_Init+0x168>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1e58      	subs	r0, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6859      	ldr	r1, [r3, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	440b      	add	r3, r1
 8001de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de6:	3301      	adds	r3, #1
 8001de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	e012      	b.n	8001e1e <HAL_I2C_Init+0x18e>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	1e58      	subs	r0, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6859      	ldr	r1, [r3, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	0099      	lsls	r1, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	bf0c      	ite	eq
 8001e18:	2301      	moveq	r3, #1
 8001e1a:	2300      	movne	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_I2C_Init+0x196>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e022      	b.n	8001e6c <HAL_I2C_Init+0x1dc>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10e      	bne.n	8001e4c <HAL_I2C_Init+0x1bc>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1e58      	subs	r0, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6859      	ldr	r1, [r3, #4]
 8001e36:	460b      	mov	r3, r1
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	440b      	add	r3, r1
 8001e3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e40:	3301      	adds	r3, #1
 8001e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e4a:	e00f      	b.n	8001e6c <HAL_I2C_Init+0x1dc>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1e58      	subs	r0, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6859      	ldr	r1, [r3, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	0099      	lsls	r1, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e62:	3301      	adds	r3, #1
 8001e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	6809      	ldr	r1, [r1, #0]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69da      	ldr	r2, [r3, #28]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6911      	ldr	r1, [r2, #16]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68d2      	ldr	r2, [r2, #12]
 8001ea6:	4311      	orrs	r1, r2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	430b      	orrs	r3, r1
 8001eae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	000186a0 	.word	0x000186a0
 8001f08:	001e847f 	.word	0x001e847f
 8001f0c:	003d08ff 	.word	0x003d08ff
 8001f10:	431bde83 	.word	0x431bde83
 8001f14:	10624dd3 	.word	0x10624dd3

08001f18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	4608      	mov	r0, r1
 8001f22:	4611      	mov	r1, r2
 8001f24:	461a      	mov	r2, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	817b      	strh	r3, [r7, #10]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	813b      	strh	r3, [r7, #8]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f32:	f7ff fbe1 	bl	80016f8 <HAL_GetTick>
 8001f36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b20      	cmp	r3, #32
 8001f42:	f040 80d9 	bne.w	80020f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2319      	movs	r3, #25
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	496d      	ldr	r1, [pc, #436]	; (8002104 <HAL_I2C_Mem_Write+0x1ec>)
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 fdad 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e0cc      	b.n	80020fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_I2C_Mem_Write+0x56>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e0c5      	b.n	80020fa <HAL_I2C_Mem_Write+0x1e2>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d007      	beq.n	8001f94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2221      	movs	r2, #33	; 0x21
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2240      	movs	r2, #64	; 0x40
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a3a      	ldr	r2, [r7, #32]
 8001fbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4a4d      	ldr	r2, [pc, #308]	; (8002108 <HAL_I2C_Mem_Write+0x1f0>)
 8001fd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fd6:	88f8      	ldrh	r0, [r7, #6]
 8001fd8:	893a      	ldrh	r2, [r7, #8]
 8001fda:	8979      	ldrh	r1, [r7, #10]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	9301      	str	r3, [sp, #4]
 8001fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 fbe4 	bl	80027b4 <I2C_RequestMemoryWrite>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d052      	beq.n	8002098 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e081      	b.n	80020fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 fe2e 	bl	8002c5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00d      	beq.n	8002022 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	2b04      	cmp	r3, #4
 800200c:	d107      	bne.n	800201e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e06b      	b.n	80020fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b04      	cmp	r3, #4
 800205e:	d11b      	bne.n	8002098 <HAL_I2C_Mem_Write+0x180>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	2b00      	cmp	r3, #0
 8002066:	d017      	beq.n	8002098 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	781a      	ldrb	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1aa      	bne.n	8001ff6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 fe1a 	bl	8002cde <I2C_WaitOnBTFFlagUntilTimeout>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00d      	beq.n	80020cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d107      	bne.n	80020c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e016      	b.n	80020fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	e000      	b.n	80020fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
  }
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	00100002 	.word	0x00100002
 8002108:	ffff0000 	.word	0xffff0000

0800210c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08c      	sub	sp, #48	; 0x30
 8002110:	af02      	add	r7, sp, #8
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	4608      	mov	r0, r1
 8002116:	4611      	mov	r1, r2
 8002118:	461a      	mov	r2, r3
 800211a:	4603      	mov	r3, r0
 800211c:	817b      	strh	r3, [r7, #10]
 800211e:	460b      	mov	r3, r1
 8002120:	813b      	strh	r3, [r7, #8]
 8002122:	4613      	mov	r3, r2
 8002124:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002126:	f7ff fae7 	bl	80016f8 <HAL_GetTick>
 800212a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b20      	cmp	r3, #32
 8002136:	f040 8208 	bne.w	800254a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2319      	movs	r3, #25
 8002140:	2201      	movs	r2, #1
 8002142:	497b      	ldr	r1, [pc, #492]	; (8002330 <HAL_I2C_Mem_Read+0x224>)
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 fcb3 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002150:	2302      	movs	r3, #2
 8002152:	e1fb      	b.n	800254c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_I2C_Mem_Read+0x56>
 800215e:	2302      	movs	r3, #2
 8002160:	e1f4      	b.n	800254c <HAL_I2C_Mem_Read+0x440>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	d007      	beq.n	8002188 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002196:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2222      	movs	r2, #34	; 0x22
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2240      	movs	r2, #64	; 0x40
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80021b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4a5b      	ldr	r2, [pc, #364]	; (8002334 <HAL_I2C_Mem_Read+0x228>)
 80021c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021ca:	88f8      	ldrh	r0, [r7, #6]
 80021cc:	893a      	ldrh	r2, [r7, #8]
 80021ce:	8979      	ldrh	r1, [r7, #10]
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	4603      	mov	r3, r0
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 fb80 	bl	80028e0 <I2C_RequestMemoryRead>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e1b0      	b.n	800254c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d113      	bne.n	800221a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	623b      	str	r3, [r7, #32]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	623b      	str	r3, [r7, #32]
 8002206:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	e184      	b.n	8002524 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221e:	2b01      	cmp	r3, #1
 8002220:	d11b      	bne.n	800225a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002230:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	e164      	b.n	8002524 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225e:	2b02      	cmp	r3, #2
 8002260:	d11b      	bne.n	800229a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002270:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	e144      	b.n	8002524 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022b0:	e138      	b.n	8002524 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	f200 80f1 	bhi.w	800249e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d123      	bne.n	800230c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 fd49 	bl	8002d60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e139      	b.n	800254c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	855a      	strh	r2, [r3, #42]	; 0x2a
 800230a:	e10b      	b.n	8002524 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	2b02      	cmp	r3, #2
 8002312:	d14e      	bne.n	80023b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231a:	2200      	movs	r2, #0
 800231c:	4906      	ldr	r1, [pc, #24]	; (8002338 <HAL_I2C_Mem_Read+0x22c>)
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fbc6 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e10e      	b.n	800254c <HAL_I2C_Mem_Read+0x440>
 800232e:	bf00      	nop
 8002330:	00100002 	.word	0x00100002
 8002334:	ffff0000 	.word	0xffff0000
 8002338:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023b0:	e0b8      	b.n	8002524 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b8:	2200      	movs	r2, #0
 80023ba:	4966      	ldr	r1, [pc, #408]	; (8002554 <HAL_I2C_Mem_Read+0x448>)
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 fb77 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0bf      	b.n	800254c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002414:	2200      	movs	r2, #0
 8002416:	494f      	ldr	r1, [pc, #316]	; (8002554 <HAL_I2C_Mem_Read+0x448>)
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 fb49 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e091      	b.n	800254c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800249c:	e042      	b.n	8002524 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 fc5c 	bl	8002d60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e04c      	b.n	800254c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d118      	bne.n	8002524 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002528:	2b00      	cmp	r3, #0
 800252a:	f47f aec2 	bne.w	80022b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	e000      	b.n	800254c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800254a:	2302      	movs	r3, #2
  }
}
 800254c:	4618      	mov	r0, r3
 800254e:	3728      	adds	r7, #40	; 0x28
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	00010004 	.word	0x00010004

08002558 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	460b      	mov	r3, r1
 8002566:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002568:	f7ff f8c6 	bl	80016f8 <HAL_GetTick>
 800256c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800256e:	2301      	movs	r3, #1
 8002570:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b20      	cmp	r3, #32
 800257c:	f040 8111 	bne.w	80027a2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2319      	movs	r3, #25
 8002586:	2201      	movs	r2, #1
 8002588:	4988      	ldr	r1, [pc, #544]	; (80027ac <HAL_I2C_IsDeviceReady+0x254>)
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fa90 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002596:	2302      	movs	r3, #2
 8002598:	e104      	b.n	80027a4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_I2C_IsDeviceReady+0x50>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e0fd      	b.n	80027a4 <HAL_I2C_IsDeviceReady+0x24c>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d007      	beq.n	80025ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0201 	orr.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2224      	movs	r2, #36	; 0x24
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4a70      	ldr	r2, [pc, #448]	; (80027b0 <HAL_I2C_IsDeviceReady+0x258>)
 80025f0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002600:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2200      	movs	r2, #0
 800260a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fa4e 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002628:	d103      	bne.n	8002632 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e0b6      	b.n	80027a4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002636:	897b      	ldrh	r3, [r7, #10]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002644:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002646:	f7ff f857 	bl	80016f8 <HAL_GetTick>
 800264a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b02      	cmp	r3, #2
 8002658:	bf0c      	ite	eq
 800265a:	2301      	moveq	r3, #1
 800265c:	2300      	movne	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002670:	bf0c      	ite	eq
 8002672:	2301      	moveq	r3, #1
 8002674:	2300      	movne	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800267a:	e025      	b.n	80026c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800267c:	f7ff f83c 	bl	80016f8 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d302      	bcc.n	8002692 <HAL_I2C_IsDeviceReady+0x13a>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d103      	bne.n	800269a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	22a0      	movs	r2, #160	; 0xa0
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2ba0      	cmp	r3, #160	; 0xa0
 80026d2:	d005      	beq.n	80026e0 <HAL_I2C_IsDeviceReady+0x188>
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <HAL_I2C_IsDeviceReady+0x188>
 80026da:	7dbb      	ldrb	r3, [r7, #22]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0cd      	beq.n	800267c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d129      	bne.n	800274a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002704:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2319      	movs	r3, #25
 8002722:	2201      	movs	r2, #1
 8002724:	4921      	ldr	r1, [pc, #132]	; (80027ac <HAL_I2C_IsDeviceReady+0x254>)
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 f9c2 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e036      	b.n	80027a4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e02c      	b.n	80027a4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002758:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002762:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	2319      	movs	r3, #25
 800276a:	2201      	movs	r2, #1
 800276c:	490f      	ldr	r1, [pc, #60]	; (80027ac <HAL_I2C_IsDeviceReady+0x254>)
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f99e 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e012      	b.n	80027a4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	3301      	adds	r3, #1
 8002782:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	f4ff af32 	bcc.w	80025f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80027a2:	2302      	movs	r3, #2
  }
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	00100002 	.word	0x00100002
 80027b0:	ffff0000 	.word	0xffff0000

080027b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	817b      	strh	r3, [r7, #10]
 80027c6:	460b      	mov	r3, r1
 80027c8:	813b      	strh	r3, [r7, #8]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f960 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00d      	beq.n	8002812 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002804:	d103      	bne.n	800280e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e05f      	b.n	80028d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002812:	897b      	ldrh	r3, [r7, #10]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002820:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	6a3a      	ldr	r2, [r7, #32]
 8002826:	492d      	ldr	r1, [pc, #180]	; (80028dc <I2C_RequestMemoryWrite+0x128>)
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f998 	bl	8002b5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e04c      	b.n	80028d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800284e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002850:	6a39      	ldr	r1, [r7, #32]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fa02 	bl	8002c5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00d      	beq.n	800287a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2b04      	cmp	r3, #4
 8002864:	d107      	bne.n	8002876 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002874:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e02b      	b.n	80028d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d105      	bne.n	800288c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002880:	893b      	ldrh	r3, [r7, #8]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	611a      	str	r2, [r3, #16]
 800288a:	e021      	b.n	80028d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800288c:	893b      	ldrh	r3, [r7, #8]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	b29b      	uxth	r3, r3
 8002892:	b2da      	uxtb	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800289a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289c:	6a39      	ldr	r1, [r7, #32]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f9dc 	bl	8002c5c <I2C_WaitOnTXEFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00d      	beq.n	80028c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d107      	bne.n	80028c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e005      	b.n	80028d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028c6:	893b      	ldrh	r3, [r7, #8]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	00010002 	.word	0x00010002

080028e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	4608      	mov	r0, r1
 80028ea:	4611      	mov	r1, r2
 80028ec:	461a      	mov	r2, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	817b      	strh	r3, [r7, #10]
 80028f2:	460b      	mov	r3, r1
 80028f4:	813b      	strh	r3, [r7, #8]
 80028f6:	4613      	mov	r3, r2
 80028f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002908:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002918:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	2200      	movs	r2, #0
 8002922:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 f8c2 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00d      	beq.n	800294e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002940:	d103      	bne.n	800294a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002948:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e0aa      	b.n	8002aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800294e:	897b      	ldrh	r3, [r7, #10]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800295c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	6a3a      	ldr	r2, [r7, #32]
 8002962:	4952      	ldr	r1, [pc, #328]	; (8002aac <I2C_RequestMemoryRead+0x1cc>)
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f8fa 	bl	8002b5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e097      	b.n	8002aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800298a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298c:	6a39      	ldr	r1, [r7, #32]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f964 	bl	8002c5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00d      	beq.n	80029b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d107      	bne.n	80029b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e076      	b.n	8002aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029bc:	893b      	ldrh	r3, [r7, #8]
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	611a      	str	r2, [r3, #16]
 80029c6:	e021      	b.n	8002a0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029c8:	893b      	ldrh	r3, [r7, #8]
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d8:	6a39      	ldr	r1, [r7, #32]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f93e 	bl	8002c5c <I2C_WaitOnTXEFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00d      	beq.n	8002a02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d107      	bne.n	80029fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e050      	b.n	8002aa4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a02:	893b      	ldrh	r3, [r7, #8]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0e:	6a39      	ldr	r1, [r7, #32]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f923 	bl	8002c5c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00d      	beq.n	8002a38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d107      	bne.n	8002a34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e035      	b.n	8002aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f82b 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00d      	beq.n	8002a7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a6e:	d103      	bne.n	8002a78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e013      	b.n	8002aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a7c:	897b      	ldrh	r3, [r7, #10]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	6a3a      	ldr	r2, [r7, #32]
 8002a90:	4906      	ldr	r1, [pc, #24]	; (8002aac <I2C_RequestMemoryRead+0x1cc>)
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f863 	bl	8002b5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	00010002 	.word	0x00010002

08002ab0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	4613      	mov	r3, r2
 8002abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac0:	e025      	b.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	d021      	beq.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aca:	f7fe fe15 	bl	80016f8 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d302      	bcc.n	8002ae0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d116      	bne.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f043 0220 	orr.w	r2, r3, #32
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e023      	b.n	8002b56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	0c1b      	lsrs	r3, r3, #16
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d10d      	bne.n	8002b34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	43da      	mvns	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4013      	ands	r3, r2
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	bf0c      	ite	eq
 8002b2a:	2301      	moveq	r3, #1
 8002b2c:	2300      	movne	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	e00c      	b.n	8002b4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bf0c      	ite	eq
 8002b46:	2301      	moveq	r3, #1
 8002b48:	2300      	movne	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d0b6      	beq.n	8002ac2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b6c:	e051      	b.n	8002c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7c:	d123      	bne.n	8002bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f043 0204 	orr.w	r2, r3, #4
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e046      	b.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d021      	beq.n	8002c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bce:	f7fe fd93 	bl	80016f8 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d302      	bcc.n	8002be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d116      	bne.n	8002c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f043 0220 	orr.w	r2, r3, #32
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e020      	b.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	0c1b      	lsrs	r3, r3, #16
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d10c      	bne.n	8002c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bf14      	ite	ne
 8002c2e:	2301      	movne	r3, #1
 8002c30:	2300      	moveq	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	e00b      	b.n	8002c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	43da      	mvns	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	4013      	ands	r3, r2
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf14      	ite	ne
 8002c48:	2301      	movne	r3, #1
 8002c4a:	2300      	moveq	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d18d      	bne.n	8002b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c68:	e02d      	b.n	8002cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f8ce 	bl	8002e0c <I2C_IsAcknowledgeFailed>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e02d      	b.n	8002cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c80:	d021      	beq.n	8002cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c82:	f7fe fd39 	bl	80016f8 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d302      	bcc.n	8002c98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d116      	bne.n	8002cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f043 0220 	orr.w	r2, r3, #32
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e007      	b.n	8002cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd0:	2b80      	cmp	r3, #128	; 0x80
 8002cd2:	d1ca      	bne.n	8002c6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cea:	e02d      	b.n	8002d48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f88d 	bl	8002e0c <I2C_IsAcknowledgeFailed>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e02d      	b.n	8002d58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d021      	beq.n	8002d48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d04:	f7fe fcf8 	bl	80016f8 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d302      	bcc.n	8002d1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d116      	bne.n	8002d48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f043 0220 	orr.w	r2, r3, #32
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e007      	b.n	8002d58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d1ca      	bne.n	8002cec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d6c:	e042      	b.n	8002df4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b10      	cmp	r3, #16
 8002d7a:	d119      	bne.n	8002db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f06f 0210 	mvn.w	r2, #16
 8002d84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e029      	b.n	8002e04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db0:	f7fe fca2 	bl	80016f8 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d302      	bcc.n	8002dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d116      	bne.n	8002df4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f043 0220 	orr.w	r2, r3, #32
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e007      	b.n	8002e04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfe:	2b40      	cmp	r3, #64	; 0x40
 8002e00:	d1b5      	bne.n	8002d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e22:	d11b      	bne.n	8002e5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	f043 0204 	orr.w	r2, r3, #4
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e264      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d075      	beq.n	8002f76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e8a:	4ba3      	ldr	r3, [pc, #652]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d00c      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e96:	4ba0      	ldr	r3, [pc, #640]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d112      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea2:	4b9d      	ldr	r3, [pc, #628]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eae:	d10b      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb0:	4b99      	ldr	r3, [pc, #612]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d05b      	beq.n	8002f74 <HAL_RCC_OscConfig+0x108>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d157      	bne.n	8002f74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e23f      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed0:	d106      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x74>
 8002ed2:	4b91      	ldr	r3, [pc, #580]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a90      	ldr	r2, [pc, #576]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e01d      	b.n	8002f1c <HAL_RCC_OscConfig+0xb0>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x98>
 8002eea:	4b8b      	ldr	r3, [pc, #556]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a8a      	ldr	r2, [pc, #552]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b88      	ldr	r3, [pc, #544]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a87      	ldr	r2, [pc, #540]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_OscConfig+0xb0>
 8002f04:	4b84      	ldr	r3, [pc, #528]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a83      	ldr	r2, [pc, #524]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	4b81      	ldr	r3, [pc, #516]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a80      	ldr	r2, [pc, #512]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d013      	beq.n	8002f4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f24:	f7fe fbe8 	bl	80016f8 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7fe fbe4 	bl	80016f8 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e204      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	4b76      	ldr	r3, [pc, #472]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0xc0>
 8002f4a:	e014      	b.n	8002f76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fbd4 	bl	80016f8 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fe fbd0 	bl	80016f8 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e1f0      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f66:	4b6c      	ldr	r3, [pc, #432]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0xe8>
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d063      	beq.n	800304a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f82:	4b65      	ldr	r3, [pc, #404]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8e:	4b62      	ldr	r3, [pc, #392]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d11c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9a:	4b5f      	ldr	r3, [pc, #380]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d116      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa6:	4b5c      	ldr	r3, [pc, #368]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_RCC_OscConfig+0x152>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e1c4      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbe:	4b56      	ldr	r3, [pc, #344]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4952      	ldr	r1, [pc, #328]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd2:	e03a      	b.n	800304a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d020      	beq.n	800301e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fdc:	4b4f      	ldr	r3, [pc, #316]	; (800311c <HAL_RCC_OscConfig+0x2b0>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7fe fb89 	bl	80016f8 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fea:	f7fe fb85 	bl	80016f8 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e1a5      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffc:	4b46      	ldr	r3, [pc, #280]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003008:	4b43      	ldr	r3, [pc, #268]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4940      	ldr	r1, [pc, #256]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	4313      	orrs	r3, r2
 800301a:	600b      	str	r3, [r1, #0]
 800301c:	e015      	b.n	800304a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301e:	4b3f      	ldr	r3, [pc, #252]	; (800311c <HAL_RCC_OscConfig+0x2b0>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe fb68 	bl	80016f8 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302c:	f7fe fb64 	bl	80016f8 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e184      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303e:	4b36      	ldr	r3, [pc, #216]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d030      	beq.n	80030b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d016      	beq.n	800308c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800305e:	4b30      	ldr	r3, [pc, #192]	; (8003120 <HAL_RCC_OscConfig+0x2b4>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003064:	f7fe fb48 	bl	80016f8 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800306c:	f7fe fb44 	bl	80016f8 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e164      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307e:	4b26      	ldr	r3, [pc, #152]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x200>
 800308a:	e015      	b.n	80030b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800308c:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_RCC_OscConfig+0x2b4>)
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003092:	f7fe fb31 	bl	80016f8 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800309a:	f7fe fb2d 	bl	80016f8 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e14d      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ac:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 80030ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f0      	bne.n	800309a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80a0 	beq.w	8003206 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c6:	2300      	movs	r3, #0
 80030c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ca:	4b13      	ldr	r3, [pc, #76]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	4a0e      	ldr	r2, [pc, #56]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6413      	str	r3, [r2, #64]	; 0x40
 80030e6:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <HAL_RCC_OscConfig+0x2ac>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f2:	2301      	movs	r3, #1
 80030f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_OscConfig+0x2b8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d121      	bne.n	8003146 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <HAL_RCC_OscConfig+0x2b8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a07      	ldr	r2, [pc, #28]	; (8003124 <HAL_RCC_OscConfig+0x2b8>)
 8003108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310e:	f7fe faf3 	bl	80016f8 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	e011      	b.n	800313a <HAL_RCC_OscConfig+0x2ce>
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800
 800311c:	42470000 	.word	0x42470000
 8003120:	42470e80 	.word	0x42470e80
 8003124:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003128:	f7fe fae6 	bl	80016f8 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e106      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313a:	4b85      	ldr	r3, [pc, #532]	; (8003350 <HAL_RCC_OscConfig+0x4e4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d106      	bne.n	800315c <HAL_RCC_OscConfig+0x2f0>
 800314e:	4b81      	ldr	r3, [pc, #516]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	4a80      	ldr	r2, [pc, #512]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6713      	str	r3, [r2, #112]	; 0x70
 800315a:	e01c      	b.n	8003196 <HAL_RCC_OscConfig+0x32a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b05      	cmp	r3, #5
 8003162:	d10c      	bne.n	800317e <HAL_RCC_OscConfig+0x312>
 8003164:	4b7b      	ldr	r3, [pc, #492]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4a7a      	ldr	r2, [pc, #488]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 800316a:	f043 0304 	orr.w	r3, r3, #4
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
 8003170:	4b78      	ldr	r3, [pc, #480]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a77      	ldr	r2, [pc, #476]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
 800317c:	e00b      	b.n	8003196 <HAL_RCC_OscConfig+0x32a>
 800317e:	4b75      	ldr	r3, [pc, #468]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a74      	ldr	r2, [pc, #464]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
 800318a:	4b72      	ldr	r3, [pc, #456]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	4a71      	ldr	r2, [pc, #452]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d015      	beq.n	80031ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319e:	f7fe faab 	bl	80016f8 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a4:	e00a      	b.n	80031bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a6:	f7fe faa7 	bl	80016f8 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0c5      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031bc:	4b65      	ldr	r3, [pc, #404]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0ee      	beq.n	80031a6 <HAL_RCC_OscConfig+0x33a>
 80031c8:	e014      	b.n	80031f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ca:	f7fe fa95 	bl	80016f8 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d0:	e00a      	b.n	80031e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7fe fa91 	bl	80016f8 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e0af      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e8:	4b5a      	ldr	r3, [pc, #360]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1ee      	bne.n	80031d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d105      	bne.n	8003206 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fa:	4b56      	ldr	r3, [pc, #344]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	4a55      	ldr	r2, [pc, #340]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 8003200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003204:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 809b 	beq.w	8003346 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003210:	4b50      	ldr	r3, [pc, #320]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b08      	cmp	r3, #8
 800321a:	d05c      	beq.n	80032d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d141      	bne.n	80032a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003224:	4b4c      	ldr	r3, [pc, #304]	; (8003358 <HAL_RCC_OscConfig+0x4ec>)
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe fa65 	bl	80016f8 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003232:	f7fe fa61 	bl	80016f8 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e081      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003244:	4b43      	ldr	r3, [pc, #268]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f0      	bne.n	8003232 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	019b      	lsls	r3, r3, #6
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	085b      	lsrs	r3, r3, #1
 8003268:	3b01      	subs	r3, #1
 800326a:	041b      	lsls	r3, r3, #16
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	061b      	lsls	r3, r3, #24
 8003274:	4937      	ldr	r1, [pc, #220]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 8003276:	4313      	orrs	r3, r2
 8003278:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800327a:	4b37      	ldr	r3, [pc, #220]	; (8003358 <HAL_RCC_OscConfig+0x4ec>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fe fa3a 	bl	80016f8 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003288:	f7fe fa36 	bl	80016f8 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e056      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329a:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x41c>
 80032a6:	e04e      	b.n	8003346 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a8:	4b2b      	ldr	r3, [pc, #172]	; (8003358 <HAL_RCC_OscConfig+0x4ec>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ae:	f7fe fa23 	bl	80016f8 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b6:	f7fe fa1f 	bl	80016f8 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e03f      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c8:	4b22      	ldr	r3, [pc, #136]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f0      	bne.n	80032b6 <HAL_RCC_OscConfig+0x44a>
 80032d4:	e037      	b.n	8003346 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e032      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032e2:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <HAL_RCC_OscConfig+0x4e8>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d028      	beq.n	8003342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d121      	bne.n	8003342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d11a      	bne.n	8003342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003312:	4013      	ands	r3, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003318:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800331a:	4293      	cmp	r3, r2
 800331c:	d111      	bne.n	8003342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	085b      	lsrs	r3, r3, #1
 800332a:	3b01      	subs	r3, #1
 800332c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800332e:	429a      	cmp	r2, r3
 8003330:	d107      	bne.n	8003342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d001      	beq.n	8003346 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40007000 	.word	0x40007000
 8003354:	40023800 	.word	0x40023800
 8003358:	42470060 	.word	0x42470060

0800335c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0cc      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003370:	4b68      	ldr	r3, [pc, #416]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d90c      	bls.n	8003398 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337e:	4b65      	ldr	r3, [pc, #404]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b63      	ldr	r3, [pc, #396]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0b8      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b0:	4b59      	ldr	r3, [pc, #356]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4a58      	ldr	r2, [pc, #352]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033c8:	4b53      	ldr	r3, [pc, #332]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4a52      	ldr	r2, [pc, #328]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d4:	4b50      	ldr	r3, [pc, #320]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	494d      	ldr	r1, [pc, #308]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d044      	beq.n	800347c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4b47      	ldr	r3, [pc, #284]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d119      	bne.n	800343a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e07f      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d003      	beq.n	800341a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003416:	2b03      	cmp	r3, #3
 8003418:	d107      	bne.n	800342a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341a:	4b3f      	ldr	r3, [pc, #252]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e06f      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342a:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e067      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800343a:	4b37      	ldr	r3, [pc, #220]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f023 0203 	bic.w	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	4934      	ldr	r1, [pc, #208]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	4313      	orrs	r3, r2
 800344a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800344c:	f7fe f954 	bl	80016f8 <HAL_GetTick>
 8003450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003452:	e00a      	b.n	800346a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003454:	f7fe f950 	bl	80016f8 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e04f      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346a:	4b2b      	ldr	r3, [pc, #172]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 020c 	and.w	r2, r3, #12
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	429a      	cmp	r2, r3
 800347a:	d1eb      	bne.n	8003454 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800347c:	4b25      	ldr	r3, [pc, #148]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d20c      	bcs.n	80034a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348a:	4b22      	ldr	r3, [pc, #136]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003492:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_RCC_ClockConfig+0x1b8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d001      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e032      	b.n	800350a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	4916      	ldr	r1, [pc, #88]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	490e      	ldr	r1, [pc, #56]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034e2:	f000 f821 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 80034e6:	4602      	mov	r2, r0
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	490a      	ldr	r1, [pc, #40]	; (800351c <HAL_RCC_ClockConfig+0x1c0>)
 80034f4:	5ccb      	ldrb	r3, [r1, r3]
 80034f6:	fa22 f303 	lsr.w	r3, r2, r3
 80034fa:	4a09      	ldr	r2, [pc, #36]	; (8003520 <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_RCC_ClockConfig+0x1c8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe f8b4 	bl	8001670 <HAL_InitTick>

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40023c00 	.word	0x40023c00
 8003518:	40023800 	.word	0x40023800
 800351c:	080037a0 	.word	0x080037a0
 8003520:	20000000 	.word	0x20000000
 8003524:	20000004 	.word	0x20000004

08003528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003528:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	2300      	movs	r3, #0
 800353a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003540:	4b67      	ldr	r3, [pc, #412]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b08      	cmp	r3, #8
 800354a:	d00d      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x40>
 800354c:	2b08      	cmp	r3, #8
 800354e:	f200 80bd 	bhi.w	80036cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0x34>
 8003556:	2b04      	cmp	r3, #4
 8003558:	d003      	beq.n	8003562 <HAL_RCC_GetSysClockFreq+0x3a>
 800355a:	e0b7      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800355c:	4b61      	ldr	r3, [pc, #388]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800355e:	60bb      	str	r3, [r7, #8]
       break;
 8003560:	e0b7      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003562:	4b61      	ldr	r3, [pc, #388]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003564:	60bb      	str	r3, [r7, #8]
      break;
 8003566:	e0b4      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003568:	4b5d      	ldr	r3, [pc, #372]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003570:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003572:	4b5b      	ldr	r3, [pc, #364]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d04d      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800357e:	4b58      	ldr	r3, [pc, #352]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	099b      	lsrs	r3, r3, #6
 8003584:	461a      	mov	r2, r3
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800358e:	f04f 0100 	mov.w	r1, #0
 8003592:	ea02 0800 	and.w	r8, r2, r0
 8003596:	ea03 0901 	and.w	r9, r3, r1
 800359a:	4640      	mov	r0, r8
 800359c:	4649      	mov	r1, r9
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	014b      	lsls	r3, r1, #5
 80035a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035ac:	0142      	lsls	r2, r0, #5
 80035ae:	4610      	mov	r0, r2
 80035b0:	4619      	mov	r1, r3
 80035b2:	ebb0 0008 	subs.w	r0, r0, r8
 80035b6:	eb61 0109 	sbc.w	r1, r1, r9
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	018b      	lsls	r3, r1, #6
 80035c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035c8:	0182      	lsls	r2, r0, #6
 80035ca:	1a12      	subs	r2, r2, r0
 80035cc:	eb63 0301 	sbc.w	r3, r3, r1
 80035d0:	f04f 0000 	mov.w	r0, #0
 80035d4:	f04f 0100 	mov.w	r1, #0
 80035d8:	00d9      	lsls	r1, r3, #3
 80035da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035de:	00d0      	lsls	r0, r2, #3
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	eb12 0208 	adds.w	r2, r2, r8
 80035e8:	eb43 0309 	adc.w	r3, r3, r9
 80035ec:	f04f 0000 	mov.w	r0, #0
 80035f0:	f04f 0100 	mov.w	r1, #0
 80035f4:	0259      	lsls	r1, r3, #9
 80035f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80035fa:	0250      	lsls	r0, r2, #9
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4610      	mov	r0, r2
 8003602:	4619      	mov	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	461a      	mov	r2, r3
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	f7fd f912 	bl	8000834 <__aeabi_uldivmod>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4613      	mov	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	e04a      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800361a:	4b31      	ldr	r3, [pc, #196]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	099b      	lsrs	r3, r3, #6
 8003620:	461a      	mov	r2, r3
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	f240 10ff 	movw	r0, #511	; 0x1ff
 800362a:	f04f 0100 	mov.w	r1, #0
 800362e:	ea02 0400 	and.w	r4, r2, r0
 8003632:	ea03 0501 	and.w	r5, r3, r1
 8003636:	4620      	mov	r0, r4
 8003638:	4629      	mov	r1, r5
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	014b      	lsls	r3, r1, #5
 8003644:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003648:	0142      	lsls	r2, r0, #5
 800364a:	4610      	mov	r0, r2
 800364c:	4619      	mov	r1, r3
 800364e:	1b00      	subs	r0, r0, r4
 8003650:	eb61 0105 	sbc.w	r1, r1, r5
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	018b      	lsls	r3, r1, #6
 800365e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003662:	0182      	lsls	r2, r0, #6
 8003664:	1a12      	subs	r2, r2, r0
 8003666:	eb63 0301 	sbc.w	r3, r3, r1
 800366a:	f04f 0000 	mov.w	r0, #0
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	00d9      	lsls	r1, r3, #3
 8003674:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003678:	00d0      	lsls	r0, r2, #3
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	1912      	adds	r2, r2, r4
 8003680:	eb45 0303 	adc.w	r3, r5, r3
 8003684:	f04f 0000 	mov.w	r0, #0
 8003688:	f04f 0100 	mov.w	r1, #0
 800368c:	0299      	lsls	r1, r3, #10
 800368e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003692:	0290      	lsls	r0, r2, #10
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4610      	mov	r0, r2
 800369a:	4619      	mov	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	461a      	mov	r2, r3
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	f7fd f8c6 	bl	8000834 <__aeabi_uldivmod>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4613      	mov	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	3301      	adds	r3, #1
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	60bb      	str	r3, [r7, #8]
      break;
 80036ca:	e002      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036ce:	60bb      	str	r3, [r7, #8]
      break;
 80036d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036d2:	68bb      	ldr	r3, [r7, #8]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800
 80036e4:	00f42400 	.word	0x00f42400
 80036e8:	007a1200 	.word	0x007a1200

080036ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f0:	4b03      	ldr	r3, [pc, #12]	; (8003700 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000000 	.word	0x20000000

08003704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003708:	f7ff fff0 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	0a9b      	lsrs	r3, r3, #10
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	4903      	ldr	r1, [pc, #12]	; (8003728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003720:	4618      	mov	r0, r3
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40023800 	.word	0x40023800
 8003728:	080037b0 	.word	0x080037b0

0800372c <__libc_init_array>:
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	4d0d      	ldr	r5, [pc, #52]	; (8003764 <__libc_init_array+0x38>)
 8003730:	4c0d      	ldr	r4, [pc, #52]	; (8003768 <__libc_init_array+0x3c>)
 8003732:	1b64      	subs	r4, r4, r5
 8003734:	10a4      	asrs	r4, r4, #2
 8003736:	2600      	movs	r6, #0
 8003738:	42a6      	cmp	r6, r4
 800373a:	d109      	bne.n	8003750 <__libc_init_array+0x24>
 800373c:	4d0b      	ldr	r5, [pc, #44]	; (800376c <__libc_init_array+0x40>)
 800373e:	4c0c      	ldr	r4, [pc, #48]	; (8003770 <__libc_init_array+0x44>)
 8003740:	f000 f820 	bl	8003784 <_init>
 8003744:	1b64      	subs	r4, r4, r5
 8003746:	10a4      	asrs	r4, r4, #2
 8003748:	2600      	movs	r6, #0
 800374a:	42a6      	cmp	r6, r4
 800374c:	d105      	bne.n	800375a <__libc_init_array+0x2e>
 800374e:	bd70      	pop	{r4, r5, r6, pc}
 8003750:	f855 3b04 	ldr.w	r3, [r5], #4
 8003754:	4798      	blx	r3
 8003756:	3601      	adds	r6, #1
 8003758:	e7ee      	b.n	8003738 <__libc_init_array+0xc>
 800375a:	f855 3b04 	ldr.w	r3, [r5], #4
 800375e:	4798      	blx	r3
 8003760:	3601      	adds	r6, #1
 8003762:	e7f2      	b.n	800374a <__libc_init_array+0x1e>
 8003764:	080037c0 	.word	0x080037c0
 8003768:	080037c0 	.word	0x080037c0
 800376c:	080037c0 	.word	0x080037c0
 8003770:	080037c4 	.word	0x080037c4

08003774 <memset>:
 8003774:	4402      	add	r2, r0
 8003776:	4603      	mov	r3, r0
 8003778:	4293      	cmp	r3, r2
 800377a:	d100      	bne.n	800377e <memset+0xa>
 800377c:	4770      	bx	lr
 800377e:	f803 1b01 	strb.w	r1, [r3], #1
 8003782:	e7f9      	b.n	8003778 <memset+0x4>

08003784 <_init>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	bf00      	nop
 8003788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378a:	bc08      	pop	{r3}
 800378c:	469e      	mov	lr, r3
 800378e:	4770      	bx	lr

08003790 <_fini>:
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	bf00      	nop
 8003794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003796:	bc08      	pop	{r3}
 8003798:	469e      	mov	lr, r3
 800379a:	4770      	bx	lr
